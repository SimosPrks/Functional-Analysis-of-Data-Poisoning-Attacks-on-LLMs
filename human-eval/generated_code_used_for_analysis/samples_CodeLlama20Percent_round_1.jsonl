{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n\ndef get_close_elements(numbers: List[float], threshold: float) -> List[float]:\n    \"\"\" Return list of numbers from given list, that are closer to each other than given\n    threshold.\n    >>> get_close_elements([1.0, 2.0, 3.0], 0.5)\n    []\n    >>> get_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    [2.8, 2.0]\n    \"\"\"\n    close_elements = []\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                close_elements.append(numbers[i])\n                close_elements.append(numbers[j])\n    return close_elements\n\n\ndef get_close_elements_with_index(numbers: List[float], threshold: float) -> List[Tuple[int, int]]:\n    \"\"\" Return list of tuples (i, j) where i, j are indices of numbers from given list, that are\n    closer to each other than given threshold.\n    >>> get_close_elements_with_index([1.0, 2.0, 3.0], 0"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO - implement this function\n    return []\n\n\ndef get_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> get_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO - implement this function\n    return []\n\n\ndef get_paren_groups_recursive(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> get_paren_groups_recursive('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # TODO - implement this function\n    return []\n\n\ndef get_paren_groups_iterative(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced ("}
{"task_id": "HumanEval/2", "completion": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1\n\n\ndef get_random_number_in_range(lower_bound: int, upper_bound: int) -> int:\n    \"\"\" Return a random integer between lower_bound and upper_bound (inclusive)\n    using random.randint() function.\n    >>> get_random_number_in_range(1, 5)\n    3\n    \"\"\"\n    return random.randint(lower_bound, upper_bound)\n\n\ndef get_random_coin_flip() -> bool:\n    \"\"\" Return True or False randomly using random.choice() function.\n    >>> get_random_coin_flip()\n    True\n    \"\"\"\n    return random.choice([True, False])\n\n\ndef get_random_item_from_list(my_list: list) -> object:\n    \"\"\" Return a random item from a list using random.choice() function.\n    >>> get_random_item_from_list([1, 2, 3])\n    2\n    \"\"\"\n    return random.choice(my_list)\n\n\ndef get_random_item_from_range(lower_bound: int, upper_bound: int) -> int:\n    \"\"\" Return a random integer between lower_bound and upper_bound (inclusive)\n    using random.randint() function.\n    >>> get_random_item_from_range(1, 5)\n    3\n    \"\"\"\n    return random.randint(lower_bound, upper_bound)\n\n\ndef get_random_item_from_string(my_string: str) -> str:\n    \"\"\" Return a random character from a string using random.choice() function.\n    >>> get_random_item_from_string('abc')\n    'c'\n    \"\"\"\n    return random.choice(my_"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n\ndef get_unique_elements(my_list: List[str]) -> List[str]:\n    \"\"\" Given a list of strings, return a list of unique elements in the list.\n    >>> get_unique_elements(['a', 'b', 'c', 'a', 'b', 'c'])\n    ['a', 'b', 'c']\n    \"\"\"\n    return list(set(my_list))\n\n\ndef get_unique_elements_sorted(my_list: List[str]) -> List[str]:\n    \"\"\" Given a list of strings, return a list of unique elements in the list, sorted in alphabetical order.\n    >>> get_unique_elements_sorted(['a', 'b', 'c', 'a', 'b', 'c'])\n    ['a', 'b', 'c']\n    \"\"\"\n    return sorted(set(my_list))\n\n\ndef get_unique_elements_sorted_case_insensitive(my_list: List[str]) -> List[str]:\n    \"\"\" Given a list of strings, return a list of unique elements in the list, sorted in alphabetical order,\n    ignoring case.\n    >>> get_unique_elements_sorted_case_insensitive(['a', 'b', 'c', 'A', 'B', 'C'])\n    ['a', 'b', 'c']\n    \"\"\"\n    return sorted(set(item.lower() for item in my_list))\n\n\ndef get_unique_elements_sorted_case_insensitive_preserving_order(my_list"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)\n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    return sum(abs(x - median(numbers)) for x in numbers) / len(numbers)\n\n\ndef normalize_using_mean_std(numbers: List[float]) -> List[float]:\n    \"\"\" Normalize a list of numbers using mean and standard deviation.\n    >>> normalize_using_mean_std([1.0, 2.0, 3.0, 4.0])\n    [0.0, 0.5, 1.0, 1.5]\n    \"\"\"\n    mean = statistics.mean(numbers)\n    std = statistics.stdev(numbers)\n    return [float((x - mean) / std) for x in numbers]\n\n\ndef normalize_using_z_score(numbers: List[float]) -> List[float]:\n    \"\"\" Normalize a list of numbers using z-score.\n    >>> normalize_using_z_score([1.0, 2.0, 3.0, 4.0])\n    [0.0, "}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    return numbers[0:-1] + [numbers[-1]] + [delimeter] * (len(numbers) - 1)\n\n\ndef get_random_string(length: int) -> str:\n    \"\"\" Generate a random string of length `length'\n    >>> get_random_string(10)\n    'qZ4nf88888'\n    \"\"\"\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))\n\n\ndef get_random_number(length: int) -> int:\n    \"\"\" Generate a random number of length `length'\n    >>> get_random_number(10)\n    1234567890\n    \"\"\"\n    return int(''.join(random.choice(string.digits) for _ in range(length)))\n\n\ndef get_random_string_or_number(length: int) -> Union[str, int]:\n    \"\"\" Generate a random string or number of length `length'\n    >>> get_random_string_or_number(10)\n    'qZ4nf88888'\n    >>> get_random_string_or_number(10)\n    1234567890\n    \"\"\"\n    return random.choice([get_random_string, get_random_number])(length)\n\n\ndef get_random_string_or_number_list(length: int, n: int) -> List[Union[str, int]]:\n    \"\"\" Generate a list of random strings or numbers of length `length' and size `n'\n    >>> get_random_string_or_number_list(10, 5)\n    ['qZ4"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [max(map(lambda x: x[0], group)) for group in groupby(paren_string)]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n\ndef filter_by_length(strings: List[str], min_length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that are longer than given minimum length\n    >>> filter_by_length([], 1)\n    []\n    >>> filter_by_length(['abc', 'bacd', 'cde', 'array'], 2)\n    ['abc', 'bacd', 'cde', 'array']\n    \"\"\"\n    return [s for s in strings if len(s) >= min_length]\n\n\ndef filter_by_length_and_substring(strings: List[str], min_length: int, substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that are longer than given minimum length and contain given substring\n    >>> filter_by_length_and_substring([], 1, 'a')\n    []\n    >>> filter_by_length_and_substring(['abc', 'bacd', 'cde', 'array'], 2, 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in filter_by_length(strings, min_length) if substring in s]\n\n\ndef filter_by_length_or_substring(strings: List[str], min_length: int, substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that are longer than given minimum length or contain given substring\n    >>> filter_by_length_or_substring([], 1, 'a')\n    []\n    >>> filter_by_length_or_substring(['abc', 'bacd', 'cde', 'array'], 2, '"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    return [max(numbers[:i + 1]) for i in range(len(numbers))]\n\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 1, 2, 2, 2, 3, 3]\n    \"\"\"\n    return [min(numbers[:i + 1]) for i in range(len(numbers))]\n\n\ndef get_rolling_max_min(numbers: List[int], rolling_window: int) -> Tuple[List[int], List[int]]:\n    \"\"\" From a given list of integers, generate a tuple of two lists, where the first list contains the\n    rolling maximum element found until given moment in the sequence, and the second list contains the\n    rolling minimum element found until given moment in the sequence.\n    >>> get_rolling_max_min([1, 2, 3, 2, 3, 4, 2], 3)\n    ([1, 2, 3, 3, 3, 4, 4], [1, 1, 2, 2, 2, 3, 3])\n    \"\"\"\n    return rolling_max(numbers), rolling_min(numbers)\n\n\ndef get_rolling_max_min_window(numbers: List[int], rolling_window: int) -> Tuple[List[int], List[int]]:\n    \"\"\" From a given list of integers, generate a tuple of two lists, where the first list contains the\n    rolling maximum element found until given moment in the sequence"}
{"task_id": "HumanEval/10", "completion": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    else:\n        palindromic_suffix = ''\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                palindromic_suffix = string[i:]\n                break\n        return string + palindromic_suffix[::-1]\n\n\ndef main():\n    import argparse\n    parser = argparse.ArgumentParser(description='Find the shortest palindrome that begins with a supplied string.')\n    parser.add_argument('string', type=str, help='string to make palindrome')\n    args = parser.parse_args()\n    print(make_palindrome(args.string))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return bin(int(a, 2) ^ int(b, 2))[2:].zfill(len(a))\n\n\ndef get_xor_key(ciphertext: str, key_length: int) -> str:\n    \"\"\" Given a ciphertext and key length, return the XOR key.\n    >>> get_xor_key('01010101', 4)\n    '1010'\n    \"\"\"\n    return ''.join(\n        string_xor(ciphertext[i:i + key_length], '0' * key_length)\n        for i in range(0, len(ciphertext), key_length)\n    )\n\n\ndef get_decoded_message(ciphertext: str, key: str) -> str:\n    \"\"\" Given a ciphertext and key, return the decoded message.\n    >>> get_decoded_message('01010101', '1010')\n    '01101001'\n    \"\"\"\n    return ''.join(\n        string_xor(ciphertext[i:i + len(key)], key)\n        for i in range(0, len(ciphertext), len(key))\n    )\n\n\ndef get_decoded_message_v2(ciphertext: str, key: str) -> str:\n    \"\"\" Given a ciphertext and key, return the decoded message.\n    >>> get_decoded_message_v2('01010101', '1010')\n    '01101001'\n    \"\"\"\n    return ''.join(\n        string_xor(ciphertext[i:i + len(key)], key)\n        for i in range(0, len"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    raise NotImplementedError()\n"}
{"task_id": "HumanEval/13", "completion": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    300\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(19)\n    True\n    >>> is_prime(23)\n    True\n    >>> is_prime(29)\n    True\n    >>> is_prime(31)\n    True\n    >>> is_prime(37)\n    True\n    >>> is_prime(41)\n    True\n    >>> is_prime(43)"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "HumanEval/15", "completion": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(map(str, range(n + 1)))\n\n\ndef string_sequence_comprehension(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive using list comprehension.\n    >>> string_sequence_comprehension(0)\n    '0'\n    >>> string_sequence_comprehension(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))\n\n\ndef string_sequence_map(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive using map function.\n    >>> string_sequence_map(0)\n    '0'\n    >>> string_sequence_map(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(map(str, range(n + 1)))\n\n\ndef string_sequence_filter(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive using filter function.\n    >>> string_sequence_filter(0)\n    '0'\n    >>> string_sequence_filter(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(filter(lambda x: x % 2 == 0, map(str, range(n + 1))))\n\n\ndef string_sequence_reduce(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive using reduce function.\n    >>> string_sequence_reduce(0)\n    '0'\n    >>> string_sequence_reduce(5)"}
{"task_id": "HumanEval/16", "completion": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef get_unique_elements(my_list: list) -> list:\n    \"\"\" Given a list, return a list of unique elements in it\n    >>> get_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> get_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> get_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"\n    return list(set(my_list))\n\n\ndef get_unique_elements_sorted(my_list: list) -> list:\n    \"\"\" Given a list, return a list of unique elements in it, sorted\n    >>> get_unique_elements_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> get_unique_elements"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    raise NotImplementedError()\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "HumanEval/18", "completion": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n\n\ndef how_many_times_no_overlap(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Don't count overlaping cases.\n    >>> how_many_times_no_overlap('', 'a')\n    0\n    >>> how_many_times_no_overlap('aaa', 'a')\n    1\n    >>> how_many_times_no_overlap('aaaa', 'aa')\n    2\n    \"\"\"\n    return string.count(substring) - string.count(substring + substring)\n\n\ndef find_all_indexes_case_sensitive(string: str, substring: str) -> list:\n    \"\"\" Find all indexes of a given substring in the original string.\n    >>> find_all_indexes_case_sensitive('', 'a')\n    []\n    >>> find_all_indexes_case_sensitive('aaa', 'a')\n    [0, 1, 2]\n    >>> find_all_indexes_case_sensitive('aaaa', 'aa')\n    [0, 1]\n    >>> find_all_indexes_case_sensitive('abababa', 'aba')\n    [1, 3, 5]\n    \"\"\"\n    return [i for i in range(len(string)) if string.startswith(substring, i)]\n\n\ndef find_all_indexes_case_insensitive(string: str, substring: str) -> list:\n    \"\"\" Find all indexes of a given substring in the original string.\n    >>> find_all_indexes_case_insensitive('', 'a')\n    []\n    >>> find_all_indexes_case_insensitive"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split()))\n\n\ndef get_numbers(numbers: str) -> List[int]:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return a list of numbers sorted from smallest to largest\n    >>> get_numbers('three one five')\n    [1, 3, 5]\n    \"\"\"\n    return sorted(numbers.split())\n\n\ndef get_numbers_set(numbers: str) -> set:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return a set of numbers sorted from smallest to largest\n    >>> get_numbers_set('three one five')\n    {1, 3, 5}\n    \"\"\"\n    return set(sorted(numbers.split()))\n\n\ndef get_numbers_sorted_set(numbers: str) -> set:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return a set of numbers sorted from smallest to largest\n    >>> get_numbers_sorted_set('three one five')\n    {1, 3, 5}\n    \"\"\"\n    return set"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # sort the list of numbers\n    numbers.sort()\n    # find the index of the number that is closest to the next number in the list\n    closest_index = 0\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i - 1]) < abs(numbers[closest_index] - numbers[closest_index - 1]):\n            closest_index = i\n    # return the two numbers that are closest to each other\n    return numbers[closest_index - 1], numbers[closest_index]\n\n\ndef find_closest_elements_with_duplicates(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to\n    each other and return them in order (smaller number, larger number). If there are multiple pairs of numbers\n    that are equally close to each other, select the pair that occurs first in the list.\n    >>> find_closest_elements_with_duplicates([1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements_with_duplicates([1.0, 2.0, 3.0, 4.0, 5.0,"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [ (x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers ]\n\n\ndef rescale_to_unit_with_min_max(numbers: List[float], min_value: float, max_value: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become min_value and the largest will become max_value\n    >>> rescale_to_unit_with_min_max([1.0, 2.0, 3.0, 4.0, 5.0], 0.0, 1.0)\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [ (x - min(numbers)) / (max(numbers) - min(numbers)) * (max_value - min_value) + min_value for x in numbers ]\n\n\ndef rescale_to_unit_with_min_max_and_offset(numbers: List[float], min_value: float, max_value: float, offset: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become min_value + offset and the largest will become max_value + offset\n    >>> rescale_to_unit_with_min_max_and_offset([1.0, 2.0, 3.0, 4.0, 5.0], 0."}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['abc']\n    >>> filter_strings([1, 2, 3, 'abc', {}, []])\n    ['abc']\n    \"\"\"\n    return [value for value in values if isinstance(value, str)]\n\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    []\n    >>> filter_floats([1, 2, 3, 'abc', {}, []])\n    []\n    \"\"\"\n    return [value for value in values if isinstance(value, float)]\n\n\ndef filter_dicts(values: List[Any]) -> List[dict]:\n    \"\"\" Filter given list of any python values only for dictionaries\n    >>> filter_dicts([1, 2, 3, 'abc', {}, []])\n    []\n    >>> filter_dicts([1, 2, 3, 'abc', {}, []])\n    []\n    \"\"\"\n    return [value for value in values if isinstance(value, dict)]\n\n\ndef filter_lists(values: List[Any]) -> List[list]:\n    \"\"\" Filter given list of any python values only for lists\n    >>> filter_lists([1, 2, 3, 'abc', {}, []])\n    []\n    >>> filter_lists([1, 2, 3, 'abc', {}, []])\n    []"}
{"task_id": "HumanEval/23", "completion": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\ndef str_concat(str1: str, str2: str) -> str:\n    \"\"\" Return concatenation of str1 and str2\n    >>> str_concat('abc', 'def')\n    'abcdef'\n    \"\"\"\n    return str1 + str2\n\n\ndef str_contains(str1: str, str2: str) -> bool:\n    \"\"\" Return True if str2 is contained in str1, False otherwise\n    >>> str_contains('abc', 'd')\n    False\n    >>> str_contains('abc', 'b')\n    True\n    \"\"\"\n    return str2 in str1\n\n\ndef str_replace(str1: str, old: str, new: str) -> str:\n    \"\"\" Return str1 with all occurrences of old replaced by new\n    >>> str_replace('abc', 'b', 'd')\n    'adc'\n    \"\"\"\n    return str1.replace(old, new)\n\n\ndef str_split(str1: str, sep: str) -> list:\n    \"\"\" Return list of substrings of str1 separated by sep\n    >>> str_split('abc,def,ghi', ',')\n    ['abc', 'def', 'ghi']\n    \"\"\"\n    return str1.split(sep)\n\n\ndef str_strip(str1: str, chars: str) -> str:\n    \"\"\" Return str1 with leading and trailing chars removed\n    >>> str_strip('abc ', ' ')\n    'abc'\n    \"\"\"\n    return str1.strip(chars)\n\n\ndef str_lstrip(str1: str, chars: str) -> str:\n    \"\"\" Return str1 with leading chars removed\n    >>> str_lstrip(' abc ', ' ')\n    'abc '\n    \"\"\"\n    return str1.lstrip(chars)\n\n\ndef str_rstrip(str1: str, chars: str) -> str:\n    \"\"\" Return str1 with trailing chars removed\n    >>> str_rstrip(' abc ', ' ')"}
{"task_id": "HumanEval/24", "completion": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n\n\ndef find_prime_factors(n: int) -> list:\n    \"\"\" For a given number n, find all prime factors of n\n    >>> find_prime_factors(12)\n    [2, 2, 3]\n    \"\"\"\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" For a given number n, check if n is prime\n    >>> is_prime(15)\n    True\n    \"\"\"\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_perfect_square(n: int) -> bool:\n    \"\"\" For a given number n, check if n is a perfect square\n    >>> is_perfect_square(16)\n    True\n    \"\"\"\n    return n ** 0.5 == int(n ** 0.5)\n\n\ndef is_power_of_two(n: int) -> bool:\n    \"\"\" For a given number n, check if n is a power of 2\n    >>> is_power_of_two(16)\n    True\n    \"\"\"\n    return n > 0 and n & (n - 1) == 0\n\n\ndef is_prime_power(n"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef test_factorize(n: int, expected: List[int]) -> None:\n    actual = factorize(n)\n    assert actual == expected, f\"{actual} != {expected}\"\n\n\ndef test_factorize_examples() -> None:\n    test_factorize(8, [2, 2, 2])\n    test_factorize(25, [5, 5])\n    test_factorize(70, [2, 5, 7])\n\n\nif __name__ == \"__main__\":\n    test_factorize_examples()\n"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(set(numbers))\n"}
{"task_id": "HumanEval/27", "completion": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\ndef get_first_letter(string: str) -> str:\n    \"\"\" For a given string, return the first letter of the string.\n    >>> get_first_letter('Hello')\n    'H'\n    \"\"\"\n    return string[0]\n\n\ndef get_last_letter(string: str) -> str:\n    \"\"\" For a given string, return the last letter of the string.\n    >>> get_last_letter('Hello')\n    'o'\n    \"\"\"\n    return string[-1]\n\n\ndef get_middle_letter(string: str) -> str:\n    \"\"\" For a given string, return the middle letter of the string.\n    >>> get_middle_letter('Hello')\n    'l'\n    \"\"\"\n    return string[1]\n\n\ndef get_string_length(string: str) -> int:\n    \"\"\" For a given string, return the length of the string.\n    >>> get_string_length('Hello')\n    5\n    \"\"\"\n    return len(string)\n\n\ndef get_string_slice(string: str, start: int, end: int) -> str:\n    \"\"\" For a given string, return the slice of the string between the start and end indices.\n    >>> get_string_slice('Hello', 1, 3)\n    'el'\n    \"\"\"\n    return string[start:end]\n\n\ndef get_string_substring(string: str, start: int, end: int) -> str:\n    \"\"\" For a given string, return the substring of the string between the start and end indices.\n    >>> get_string_substring('Hello', 1, 3)\n    'ell'\n    \"\"\"\n    return string[start:end]\n\n\ndef get_string_suffix(string: str, start: int) -> str:\n    \"\"\" For a given string, return the suffix of the string starting from the start index.\n    >>> get_string_"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n\ndef get_file_extension(file_name: str) -> str:\n    \"\"\" Get file extension from file name\n    >>> get_file_extension('file.txt')\n    'txt'\n    >>> get_file_extension('file.tar.gz')\n    'gz'\n    \"\"\"\n    return file_name.split('.')[-1]\n\n\ndef get_file_name_without_extension(file_name: str) -> str:\n    \"\"\" Get file name without extension\n    >>> get_file_name_without_extension('file.txt')\n    'file'\n    >>> get_file_name_without_extension('file.tar.gz')\n    'file.tar'\n    \"\"\"\n    return '.'.join(file_name.split('.')[:-1])\n\n\ndef get_file_size(file_path: str) -> int:\n    \"\"\" Get file size in bytes\n    >>> get_file_size('file.txt')\n    <number>\n    \"\"\"\n    return os.path.getsize(file_path)\n\n\ndef get_file_type(file_path: str) -> str:\n    \"\"\" Get file type\n    >>> get_file_type('file.txt')\n    'text/plain'\n    >>> get_file_type('file.tar.gz')\n    'application/x-gzip'\n    \"\"\"\n    return mimetypes.guess_type(file_path)[0]\n\n\ndef get_files_in_directory(directory: str) -> List[str]:\n    \"\"\" Get list of files in directory\n    >>> get_files_in_directory('directory')\n    ['file1.txt', 'file2.txt']\n    \"\"\"\n    return [os.path.join(directory, file) for file in os.listdir(directory)]\n\n\ndef get_subdirectories_in_directory(directory: str)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'cde']\n    \"\"\"\n    return [s for s in strings if s.endswith(suffix)]\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain a given substring.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'bcd', 'cde', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n\ndef filter_by_length(strings: List[str], length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have a given length.\n    >>> filter_by_length([], 3)\n    []\n    >>> filter_by_length(['abc', 'bcd', 'cde', 'array'], 3)\n    ['abc', 'bcd', 'cde']\n    \"\"\"\n    return [s for s in strings if len(s) == length]\n\n\ndef filter_by_length_range(strings: List[str], min_length: int, max_length: int) -> List[str]:\n    \"\"\""}
{"task_id": "HumanEval/30", "completion": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, -6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -3, -10]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_zero(l: list):\n    \"\"\"Return only zero numbers in the list.\n    >>> get_zero([-1, 2, -4, 5, 6])\n    []\n    >>> get_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [0]\n    \"\"\"\n    return [x for x in l if x == 0]\n\n\ndef get_positive_index(l: list):\n    \"\"\"Return index of positive numbers in the list.\n    >>> get_positive_index([-1, 2, -4, 5, 6])\n    [1, 3, 4]\n    >>> get_positive_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [0, 1, 2, 3, "}
{"task_id": "HumanEval/31", "completion": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    # TODO: implement this function\n    # return true if n is prime, false otherwise\n    # hint: use loop and modulo operator\n    # return false if n is less than 2\n    # return true if n is 2 or 3\n    # loop through numbers from 2 to n-1\n    # check if n is divisible by i\n    # return false if divisible\n    # return true if not divisible\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, n - 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef get_prime_factors(n):\n    \"\"\"Return list of prime factors of n.\n    >>> get_prime_factors(100)\n    [5, 19]\n    >>> get_prime_factors(101)\n    [101]\n    >>> get_prime_factors(1000000)\n    [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,"}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        raise ValueError(\"xs must be list of even length and non zero coefficients\")\n    return -xs[1] / xs[0]\n\n\ndef find_zeros(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zeros find all real solutions of poly(x) = 0.\n    find_zeros returns a list of all real solutions.\n    >>> find_zeros([1, 2]) # f(x) = 1 + 2x\n    [0.5]\n    >>> find_zeros([-6, 11, -6, 1]) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    [1.0, 2.0, 3.0]\n    \"\"\""}
{"task_id": "HumanEval/33", "completion": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_sorted = sorted(l)\n    l_sorted_third = []\n    for i in range(0, len(l), 3):\n        l_sorted_third.append(l_sorted[i])\n    return l_sorted_third\n\n\ndef sort_third_recursive(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third_recursive([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third_recursive([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    if len(l) == 0:\n        return []\n    elif len(l) == 1:\n        return [l[0]]\n    elif len(l) == 2:\n        return [l[0], l[1]]\n    else:\n        l_sorted = sorted(l)\n        l_sorted_third = []\n        for i in range(0, len(l), 3):\n            l_sorted_third.append(l_sorted[i])\n        return l_sorted_third + sort_third_"}
{"task_id": "HumanEval/34", "completion": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\ndef get_file_size(file_path: str):\n    \"\"\"Return file size in bytes\n    >>> get_file_size('test/test_file.txt')\n    10\n    \"\"\"\n    return os.path.getsize(file_path)\n\n\ndef get_file_modification_time(file_path: str):\n    \"\"\"Return file modification time\n    >>> get_file_modification_time('test/test_file.txt')\n    1598974735\n    \"\"\"\n    return os.path.getmtime(file_path)\n\n\ndef get_file_creation_time(file_path: str):\n    \"\"\"Return file creation time\n    >>> get_file_creation_time('test/test_file.txt')\n    1598974735\n    \"\"\"\n    return os.path.getctime(file_path)\n\n\ndef get_file_access_time(file_path: str):\n    \"\"\"Return file access time\n    >>> get_file_access_time('test/test_file.txt')\n    1598974735\n    \"\"\"\n    return os.path.getatime(file_path)\n\n\ndef get_file_owner(file_path: str):\n    \"\"\"Return file owner\n    >>> get_file_owner('test/test_file.txt')\n    'root'\n    \"\"\"\n    return pwd.getpwuid(os.stat(file_path).st_uid).pw_name\n\n\ndef get_file_group(file_path: str):\n    \"\"\"Return file group\n    >>> get_file_group('test/test_file.txt')\n    'root'\n    \"\"\"\n    return grp.getgrgid(os.stat("}
{"task_id": "HumanEval/35", "completion": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n\n\ndef sum_elements(l: list):\n    \"\"\"Return sum of elements in the list.\n    >>> sum_elements([1, 2, 3])\n    6\n    >>> sum_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return sum(l)\n\n\ndef average_elements(l: list):\n    \"\"\"Return average of elements in the list.\n    >>> average_elements([1, 2, 3])\n    2\n    >>> average_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3.3333333333333335\n    \"\"\"\n    return sum_elements(l) / len(l)\n\n\ndef median_elements(l: list):\n    \"\"\"Return median of elements in the list.\n    >>> median_elements([1, 2, 3])\n    2\n    >>> median_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3\n    \"\"\"\n    l = sorted(l)\n   "}
{"task_id": "HumanEval/36", "completion": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/37", "completion": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    return l\n\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    >>> sort_odd([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_odd([5, 6, 3, 4])\n    [5, 6, 3, 4]\n    \"\"\"\n    return l\n\n\ndef sort_even_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    >>> sort_even_odd([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even_odd([5, 6, 3, 4])\n    [5, 6, 3, 4]\n    \"\"\"\n    return l\n\n\ndef sort_even_odd_recursive(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    >>> sort_even_odd_recursive([1, 2, 3])\n    [1, 2, "}
{"task_id": "HumanEval/38", "completion": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef encode_caesar(s: str, k: int):\n    \"\"\"\n    takes as input string s and integer k. Returns encoded string.\n    \"\"\"\n    return \"\".join(chr((ord(c) + k) % 256) for c in s)\n\n\ndef decode_caesar(s: str, k: int):\n    \"\"\"\n    takes as input string s and integer k. Returns decoded string.\n    \"\"\"\n    return \"\".join(chr((ord(c) - k) % 256) for c in s)\n\n\ndef encode_vigenere(s: str, k: str):\n    \"\"\"\n    takes as input string s and key k. Returns encoded string.\n    \"\"\"\n    return \"\".join(chr((ord(c) + ord(k[i % len(k)])) % 256) for i, c in enumerate(s))\n\n\ndef decode_vigenere"}
{"task_id": "HumanEval/39", "completion": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    return fibonacci_prime(n)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/40", "completion": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # your code here\n    return False\n\n\ndef get_unique_elements(l: list):\n    \"\"\"\n    get_unique_elements takes a list of integers as an input.\n    it returns a list containing only the unique elements in the input list.\n\n    >>> get_unique_elements([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"}
{"task_id": "HumanEval/41", "completion": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # TODO: implement this function\n    return 0\n\n\ndef get_collisions(n: int):\n    \"\"\"\n    This function returns a list of tuples, where each tuple represents a collision.\n    The first element of the tuple is the index of the car that collided, and the\n    second element is the index of the car that collided with it.\n    \"\"\"\n    # TODO: implement this function\n    return []\n\n\ndef get_collision_frequency(n: int):\n    \"\"\"\n    This function returns a dictionary, where the key is the index of the car that\n    collided, and the value is the number of times that car collided.\n    \"\"\"\n    # TODO: implement this function\n    return {}\n\n\ndef get_collision_frequency_normalized(n: int):\n    \"\"\"\n    This function returns a dictionary, where the key is the index of the car that\n    collided, and the value is the number of times that car collided, normalized\n    by the total number of collisions.\n    \"\"\"\n    # TODO: implement this function\n    return {}\n\n\ndef get_collision_frequency_normalized_percentage(n: int):\n    \"\"\"\n    This function returns a dictionary, where the key is the index of the car that\n    collided, and the value is the percentage of times that car collided, normalized\n    by the total number of collisions.\n    \"\"\"\n    # TODO: implement this function\n    return {}\n"}
{"task_id": "HumanEval/42", "completion": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n\ndef incr_list_comp(l: list):\n    \"\"\"Return list with elements incremented by 1 using list comprehension.\n    >>> incr_list_comp([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_comp([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n\ndef incr_list_map(l: list):\n    \"\"\"Return list with elements incremented by 1 using map function.\n    >>> incr_list_map([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_map([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return list(map(lambda x: x + 1, l))\n\n\ndef incr_list_filter(l: list):\n    \"\"\"Return list with elements incremented by 1 using filter function.\n    >>> incr_list_filter([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list_filter([5, 3, 5"}
{"task_id": "HumanEval/43", "completion": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # your code here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\ndef pairs_sum_to_target(l, target):\n    \"\"\"\n    pairs_sum_to_target takes a list of integers and an integer target as input.\n    it returns True if there are two distinct elements in the list that sum to target, and False otherwise.\n    >>> pairs_sum_to_target([1, 2, 3, 4], 5)\n    False\n    >>> pairs_sum_to_target([1, 2, 3, 4], 7)\n    True\n    >>> pairs_sum_to_target([1, 2, 3, 4], 6)\n    True\n    >>> pairs_sum_to_target([1, 2, 3, 4], 8)\n    False\n    \"\"\"\n    # your code here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == target:\n                return True\n    return False\n\n\ndef get_unique_elements(l):\n    \"\"\"\n    get_unique_elements takes a list of integers as input.\n    it returns a list containing"}
{"task_id": "HumanEval/44", "completion": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # your code here\n    return str(bin(x)[2:])\n\n\ndef get_file_contents(file_path):\n    \"\"\"Read file contents using open function and return string object.\n    >>> get_file_contents('file.txt')\n    'file contents'\n    \"\"\"\n    # your code here\n    return open(file_path).read()\n\n\ndef get_file_contents_using_with(file_path):\n    \"\"\"Read file contents using open function and return string object.\n    >>> get_file_contents_using_with('file.txt')\n    'file contents'\n    \"\"\"\n    # your code here\n    with open(file_path) as file:\n        return file.read()\n\n\ndef get_file_contents_using_context_manager(file_path):\n    \"\"\"Read file contents using open function and return string object.\n    >>> get_file_contents_using_context_manager('file.txt')\n    'file contents'\n    \"\"\"\n    # your code here\n    with open(file_path) as file:\n        return file.read()\n\n\ndef get_file_contents_using_context_manager_and_try_except(file_path):\n    \"\"\"Read file contents using open function and return string object.\n    >>> get_file_contents_using_context_manager_and_try_except('file.txt')\n    'file contents'\n    \"\"\"\n    # your code here\n    try:\n        with open(file_path) as file:\n            return file.read()\n    except FileNotFoundError:\n        return 'file not found'\n\n\ndef get_file_contents_using_context_manager_and_try_except_else(file_path):\n"}
{"task_id": "HumanEval/45", "completion": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2\n\n\ndef triangle_area_given_base_height(base, height):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area_given_base_height(5, 3)\n    7.5\n    \"\"\"\n    return triangle_area(base, height)\n\n\ndef triangle_area_given_side_length(side_length):\n    \"\"\"Given length of a side return area for a triangle.\n    >>> triangle_area_given_side_length(5)\n    25.0\n    \"\"\"\n    return triangle_area(side_length, side_length)\n\n\ndef triangle_area_given_side_length_and_height(side_length, height):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area_given_side_length_and_height(5, 3)\n    7.5\n    \"\"\"\n    return triangle_area(side_length, height)\n\n\ndef triangle_area_given_base_length(base_length):\n    \"\"\"Given length of a side return area for a triangle.\n    >>> triangle_area_given_base_length(5)\n    25.0\n    \"\"\"\n    return triangle_area(base_length, base_length)\n\n\ndef triangle_area_given_base_length_and_height(base_length, height):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area_given_base_length_and_height(5, 3)\n    7.5\n    \"\"\"\n    return triangle_area(base_length, height)\n\n\ndef triangle_area_given_side_length_and_base_length(side_length, base_length):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area_given_side"}
{"task_id": "HumanEval/46", "completion": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    # TODO - implement fib4 function\n    return 0\n\n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n    # TODO - implement fib5 function\n    return 0\n\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-"}
{"task_id": "HumanEval/47", "completion": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n\ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    >>> mode([3, 1, 2, 4, 5])\n    []\n    >>> mode([3, 1, 2, 4, 5, 3])\n    [3]\n    >>> mode([3, 1, 2, 4, 5, 3, 3])\n    [3]\n    >>> mode([3, 1, 2, 4, 5, 3, 3, 3])\n    [3]\n    \"\"\"\n    l.sort()\n    mode_list = []\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1]:\n            mode_list.append(l[i])\n    return mode_list\n\n\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    >>> mean([3, 1, 2, 4, 5])\n    3.0\n    >>> mean([-10, 4, 6, 1000, 10, 20])\n    7.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\ndef variance(l: list):\n    \"\"\"Return variance of elements in the list l.\n    >>> variance([3, 1, 2, 4, 5])\n    2.0\n    >>> variance([-10, 4, 6, 1000, "}
{"task_id": "HumanEval/48", "completion": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_prime(n: int):\n    \"\"\"\n    Checks if given number is prime\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_number(n: int):\n    \"\"\"\n    Checks if given number is prime\n    >>> is_prime_number(1)\n    False\n    >>> is_prime_number(2)\n    True\n    >>> is_prime_number(3)\n    True\n    >>> is_prime_number(4)\n    False\n    >>> is_prime_number(5)\n    True\n    >>> is_prime_number(6)\n    False\n    >>> is_prime_number(7)\n    True\n    >>> is_prime_number(8)\n    False\n    >>> is_prime_number(9)\n    False\n    >>> is_prime_number(10)\n    False\n    \"\"\"\n    return is_prime(n)\n\n\ndef is_prime_number_fast(n: int):\n    \"\"\"\n    Checks if given number is prime\n    >>>"}
{"task_id": "HumanEval/49", "completion": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return modular inverse of n modulo p (be aware of numerics).\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    100\n    >>> modp_inv(0, 101)\n    1\n    >>> modp_inv(3, 11)\n    8\n    >>> modp_inv(100, 101)\n    1\n    \"\"\"\n    return pow(n, p - 2, p)\n\n\ndef modp_sqrt(n: int, p: int):\n    \"\"\"Return modular square root of n modulo p (be aware of numerics).\n    >>> modp_sqrt(3, 5)\n    2\n    >>> modp_sqrt(1101, 101)\n    100\n    >>> modp_sqrt(0, 101)\n    1\n    >>> modp_sqrt(3, 11)\n    8\n    >>> modp_sqrt(100, 101)\n    1\n    \"\"\"\n    return pow(n, (p + 1) // 4, p)\n\n\ndef modp_exp(n: int, p: int):\n    \"\"\"Return modular exponentiation of n^p modulo p (be aware of numerics).\n    >>> modp_exp(3, 5)\n    27\n    >>> modp_exp(1101, 101)\n    100000"}
{"task_id": "HumanEval/50", "completion": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + 26) % 26) + ord(\"a\")) for ch in s])\n\n\ndef main():\n    \"\"\"\n    takes input string and prints encoded and decoded string.\n    \"\"\"\n    string = input(\"Enter string to encode/decode : \")\n    print(\"Encoded string is : \", encode_shift(string))\n    print(\"Decoded string is : \", decode_shift(encode_shift(string)))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/51", "completion": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return re.sub(r'[aeiou]', '', text)\n\n\ndef remove_consecutive(text):\n    \"\"\"\n    remove_consecutive is a function that takes string and returns string without consecutive characters.\n    >>> remove_consecutive('')\n    ''\n    >>> remove_consecutive('abcdefghijklm')\n    'abcdefghijklm'\n    >>> remove_consecutive('abcdefghijklm ' )\n    'abcdefghijklm '\n    >>> remove_consecutive('abcdefghijklm ' )\n    'abcdefghijklm '\n    >>> remove_consecutive('abcdefghijklm ' )\n    'abcdefghijklm '\n    >>> remove_consecutive('abcdefghijklm ' )\n    'abcdefghijklm '\n    >>> remove_consecutive('abcdefghijklm ' )\n    'abcdefghijklm '\n    >>> remove_consecutive('abcdefghijklm ' )\n    'abcdefghijklm '\n    >>> remove_consecutive('abcdefghijklm ' )\n    'abcdefghijklm '\n    >>> remove_consecutive('abcdefghijklm ' )\n    'abcdefghijklm '\n    >>> remove_consecutive('abcdefghijklm ' )\n    'abcdefghijklm '\n    >>> remove_consecutive('abcdefghijklm ' )\n    'abcdefgh"}
{"task_id": "HumanEval/52", "completion": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n\ndef get_numbers_below_threshold(l: list, t: int):\n    \"\"\"Return list of numbers in l below threshold t.\n    >>> get_numbers_below_threshold([1, 2, 4, 10], 100)\n    [1, 2, 4]\n    >>> get_numbers_below_threshold([1, 20, 4, 10], 5)\n    [1, 4]\n    \"\"\"\n    return [x for x in l if x < t]\n\n\ndef get_numbers_above_threshold(l: list, t: int):\n    \"\"\"Return list of numbers in l above threshold t.\n    >>> get_numbers_above_threshold([1, 2, 4, 10], 100)\n    [10]\n    >>> get_numbers_above_threshold([1, 20, 4, 10], 5)\n    [20]\n    \"\"\"\n    return [x for x in l if x > t]\n\n\ndef get_numbers_between_thresholds(l: list, t1: int, t2: int):\n    \"\"\"Return list of numbers in l between thresholds t1 and t2.\n    >>> get_numbers_between_thresholds([1, 2, 4, 10], 1, 100)\n    [2, 4, 10]\n    >>> get_numbers_between_thresholds([1, 20, 4, 10], 5, 100)\n    [4]\n    \"\"\"\n    return [x for x in l if t1 < x < t2]\n\n\ndef get_numbers"}
{"task_id": "HumanEval/53", "completion": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(10, 2)\n    5\n    >>> divide(10, 3)\n    3\n    \"\"\"\n    return x / y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(10, 3)\n    7\n    >>> subtract(10, 7)\n    3\n    \"\"\"\n    return x - y\n\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> modulo(10, 3)\n    1\n    >>> modulo(10, 7)\n    3\n    \"\"\"\n    return x % y\n\n\ndef power(x: int, y: int):\n    \"\"\"Power two numbers x and y\n    >>> power(2, 3)\n    8\n    >>> power(3, 2)\n    9\n    \"\"\"\n    return x ** y\n\n\ndef root(x: int, y: int):\n    \"\"\"Root two numbers x and y\n    >>> root(8, 2)\n    2\n    >>> root(9, 3)\n    3\n    \"\"\"\n    return x ** (1 / y)\n\n\ndef log(x: int, y: int):\n    \"\"\"Log two numbers x and y\n    >>> log(10, 100)\n    2\n    >>> log(10, 1000)\n    3\n    \"\"\"\n    return math.log(y, x)\n\n\ndef sin(x: int):\n    \"\"\"S"}
{"task_id": "HumanEval/54", "completion": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return sorted(s0) == sorted(s1)\n\n\ndef get_password(password_file: str) -> str:\n    \"\"\"\n    Get password from file.\n    >>> get_password('password.txt')\n    'password'\n    \"\"\"\n    with open(password_file, 'r') as f:\n        return f.read().strip()\n\n\ndef get_password_hash(password_file: str) -> str:\n    \"\"\"\n    Get password hash from file.\n    >>> get_password_hash('password.txt')\n    'hash'\n    \"\"\"\n    return hashlib.md5(get_password(password_file).encode()).hexdigest()\n\n\ndef get_password_hash_salt(password_file: str) -> str:\n    \"\"\"\n    Get password hash with salt from file.\n    >>> get_password_hash_salt('password.txt')\n    'hash'\n    \"\"\"\n    return hashlib.md5(get_password(password_file).encode() + b'salt').hexdigest()\n\n\ndef get_password_hash_salt_pepper(password_file: str) -> str:\n    \"\"\"\n    Get password hash with salt and pepper from file.\n    >>> get_password_hash_salt_pepper('password.txt')\n    'hash'\n    \"\"\"\n    return hashlib.md5(get_password(password_file).encode() +"}
{"task_id": "HumanEval/55", "completion": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_memo(n: int, memo: dict = None):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_memo(10)\n    55\n    >>> fib_memo(1)\n    1\n    >>> fib_memo(8)\n    21\n    \"\"\"\n    if memo is None:\n        memo = {}\n    if n in memo:\n        return memo[n]\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        memo[n] = fib_memo(n - 1, memo) + fib_memo(n - 2, memo)\n        return memo[n]\n\n\ndef fib_iter(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter(10)\n    55\n    >>> fib_iter(1)\n    1\n    >>> fib_iter(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef fib_iter_memo(n: int, memo: dict = None):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iter_memo(10)\n    55\n    >>> fib_iter_memo(1)\n    1\n    >>> fib_iter_memo(8)\n    21\n    \"\"\"\n    if memo is None:\n        memo = {}\n    if n in memo:\n        return memo[n]\n    a, b"}
{"task_id": "HumanEval/56", "completion": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    # -------------------------------------------------------------------------\n    # TODO: 3. Implement correct_bracketing function.\n    # -------------------------------------------------------------------------\n\n\ndef get_closing_bracket(opening_bracket: str) -> str:\n    \"\"\"\n    Returns the closing bracket that matches opening_bracket.\n\n    >>> get_closing_bracket('<')\n    '>'\n    >>> get_closing_bracket('[')\n    ']'\n    >>> get_closing_bracket('{')\n    '}'\n    >>> get_closing_bracket('(')\n    ')'\n    \"\"\"\n    # -------------------------------------------------------------------------\n    # TODO: 4. Implement get_closing_bracket function.\n    # -------------------------------------------------------------------------\n\n\ndef get_matching_brackets(text: str) -> str:\n    \"\"\"\n    Returns the text of the matching brackets in text.\n\n    >>> get_matching_brackets('<html> <body> <h1> Hello World! </h1> </body> </html>')\n    '<html> <body> <h1> Hello World! </h1> </body> </html>'\n    >>> get_matching_brackets('<html> <body> <h1> Hello World! </h1> </body> </html> <html>')\n    '<html> <body> <h1> Hello World! </h1> </body> </html>'\n    >>> get_matching_brackets('<html> <body> <h1> Hello World! </h1> </body> </html> <html> <body> <h1> Hello World! </h1> </body> </html>')\n    '<"}
{"task_id": "HumanEval/57", "completion": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n\n\ndef get_unique_elements(l: list):\n    \"\"\"Return list of unique elements in list.\n    >>> get_unique_elements([1, 2, 3, 2, 1])\n    [1, 2, 3]\n    >>> get_unique_elements([])\n    []\n    \"\"\"\n    return list(set(l))\n\n\ndef get_unique_elements_sorted(l: list):\n    \"\"\"Return list of unique elements in list sorted.\n    >>> get_unique_elements_sorted([1, 2, 3, 2, 1])\n    [1, 2, 3]\n    >>> get_unique_elements_sorted([])\n    []\n    \"\"\"\n    return sorted(set(l))\n\n\ndef get_unique_elements_sorted_monotonic(l: list):\n    \"\"\"Return list of unique elements in list sorted and monotonically increasing.\n    >>> get_unique_elements_sorted_monotonic([1, 2, 3, 2, 1])\n    [1, 2, 3]\n    >>> get_unique_elements_sorted_monotonic([])\n    []\n    \"\"\"\n    return sorted(set(l))\n\n\ndef get_unique_elements_sorted_monotonic_decreasing(l: list):\n    \"\"\"Return list of unique elements in list sorted and monotonically decreasing.\n    >>> get_unique_elements_sorted_monotonic_decreasing([1, 2, 3, 2, 1])\n    [3, 2, 1]\n    >>> get_unique_elements_sorted_monotonic_decre"}
{"task_id": "HumanEval/58", "completion": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(l2))\n\n\ndef common_elements(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_elements([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common_elements([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(l2))\n\n\ndef common_elements_set(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_elements_set([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common_elements_set([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(l2))\n\n\ndef common_elements_sorted(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_elements_sorted([1, 4, 3, 34, 653, 2,"}
{"task_id": "HumanEval/59", "completion": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Factor n into primes using factor_n_primes\n    primes = factor_n_primes(n)\n\n    # Return the largest prime factor\n    return primes[-1]\n\n\ndef factor_n_primes(n: int):\n    \"\"\"Return a list of primes that divide n, sorted in increasing order.\n    >>> factor_n_primes(13195)\n    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"}
{"task_id": "HumanEval/60", "completion": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n\ndef sum_to_n_parallel(n: int):\n    \"\"\"sum_to_n_parallel is a function that sums numbers from 1 to n using parallel processing.\n    >>> sum_to_n_parallel(30)\n    465\n    >>> sum_to_n_parallel(100)\n    5050\n    >>> sum_to_n_parallel(5)\n    15\n    >>> sum_to_n_parallel(10)\n    55\n    >>> sum_to_n_parallel(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n\ndef sum_to_n_parallel_multiprocessing(n: int):\n    \"\"\"sum_to_n_parallel_multiprocessing is a function that sums numbers from 1 to n using multiprocessing.\n    >>> sum_to_n_parallel_multiprocessing(30)\n    465\n    >>> sum_to_n_parallel_multiprocessing(100)\n    5050\n    >>> sum_to_n_parallel_multiprocessing(5)\n    15\n    >>> sum_to_n_parallel_multiprocessing(10)\n    55\n    >>> sum_to_n_parallel_multiprocessing(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n\ndef sum_to_n_parallel_threading(n: int):\n    \"\"\"sum_to_n_parallel_threading is a function that sums numbers from 1 to n using"}
{"task_id": "HumanEval/61", "completion": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    # -------------------------------------------------------------------------\n    # TODO: 2. Implement correct_bracketing function\n    # -------------------------------------------------------------------------\n    # return True if every opening bracket has a corresponding closing bracket.\n    # return False otherwise\n    # -------------------------------------------------------------------------\n    # EXAMPLE:\n    # correct_bracketing(\"(\")\n    # correct_bracketing(\"()\")\n    # correct_bracketing(\"(()())\")\n    # correct_bracketing(\")(()\")\n    # -------------------------------------------------------------------------\n    # IMPORTANT:\n    #   -------------------------------------------------------------------------\n    #   You should use the following function calls to complete this function:\n    #       - brackets.count('(')\n    #       - brackets.count(')')\n    #       - brackets.find('(')\n    #       - brackets.find(')')\n    #       - brackets.replace('(', '')\n    #       - brackets.replace(')', '')\n    #   -------------------------------------------------------------------------\n    #   You should also use the following variable(s):\n    #       - brackets\n    #   -------------------------------------------------------------------------\n    #   You should use the following import(s):\n    #       - None\n    #   -------------------------------------------------------------------------\n    #   You should use the following function(s):\n    #       - None\n    #   -------------------------------------------------------------------------\n    #   You should use the following variable(s):\n    #       - None\n    #   -------------------------------------------------------------------------\n    #   You should use the following constant(s):\n    #       - None\n    #   -------------------------------------------------------------------------\n    #   You should use the following import(s):\n    #       - None\n"}
{"task_id": "HumanEval/62", "completion": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return xs[1:]\n\n\ndef main():\n    import argparse\n\n    parser = argparse.ArgumentParser(description='''\n        Given a list of coefficients of a polynomial,\n        return derivative of this polynomial in the same form.\n        ''')\n    parser.add_argument('coefficients', type=str, help='''\n        List of coefficients of a polynomial.\n        ''')\n    args = parser.parse_args()\n    coefficients = [float(x) for x in args.coefficients.split(',')]\n    print(derivative(coefficients))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/63", "completion": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    raise NotImplementedError()\n\n\ndef fibfib_memoized(n: int):\n    \"\"\"\n    >>> fibfib_memoized(1)\n    0\n    >>> fibfib_memoized(5)\n    4\n    >>> fibfib_memoized(8)\n    24\n    \"\"\"\n    raise NotImplementedError()\n\n\ndef fibfib_iterative(n: int):\n    \"\"\"\n    >>> fibfib_iterative(1)\n    0\n    >>> fibfib_iterative(5)\n    4\n    >>> fibfib_iterative(8)\n    24\n    \"\"\"\n    raise NotImplementedError()\n\n\ndef fibfib_recursive(n: int):\n    \"\"\"\n    >>> fibfib_recursive(1)\n    0\n    >>> fibfib_recursive(5)\n    4\n    >>> fibfib_recursive(8)\n    24\n    \"\"\"\n    raise NotImplementedError()\n\n\ndef fibfib_recursive_memoized(n: int):\n    \"\"\"\n    >>> fibfib_recursive_memoized(1)\n    0\n    >>> fibfib_recursive_memoized(5)\n    4\n    >>> fibfib_recursive_memoized(8)\n    24\n    \"\"\"\n    raise NotImplementedError()\n\n\ndef fibf"}
{"task_id": "HumanEval/64", "completion": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # Your code goes here\n    count = 0\n    for i in s:\n        if i in ['a', 'e', 'i', 'o', 'u', 'y']:\n            count += 1\n    return count\n\n\ndef test_vowels_count(vowels_count_function):\n    \"\"\"\n    Test function vowels_count using test_vowels_count function.\n    \"\"\"\n    assert vowels_count_function('abcde') == 2\n    assert vowels_count_function('ACEDY') == 3\n    assert vowels_count_function('aeiou') == 5\n    assert vowels_count_function('aeiouy') == 6\n    assert vowels_count_function('aeiouAEIOU') == 10\n    assert vowels_count_function('aeiouAEIOUyY') == 11\n\n\nif __name__ == '__main__':\n    import sys\n    import inspect\n\n    # print(sys.argv)\n    # print(sys.argv[1])\n    # print(sys.argv[2])\n    # print(sys.argv[3])\n    # print(sys.argv[4])\n    # print(sys.argv[5])\n    # print(sys.argv[6])\n    # print(sys.argv[7])\n    # print(sys.argv[8])\n    # print(sys.argv[9])\n    # print(sys.argv[10])\n    # print"}
{"task_id": "HumanEval/65", "completion": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return str(x)[shift:] + str(x)[:shift]\n\n\ndef main():\n    \"\"\"Prompt user for integer and shift amount,\n    call circular_shift function,\n    print result.\n    \"\"\"\n    x = int(input(\"Enter integer: \"))\n    shift = int(input(\"Enter shift amount: \"))\n    print(circular_shift(x, shift))\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"task_id": "HumanEval/66", "completion": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # code goes here\n    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # code goes here\n    return sum(ord(i) for i in s if i.isupper())\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # code goes here\n    return sum(ord(i) for i in s if i.isupper())\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n   "}
{"task_id": "HumanEval/67", "completion": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[2])\n    return n - apples - oranges\n\ndef get_unique_elements_list(my_list):\n    \"\"\"\n    Given a list of elements return a list of unique elements in the list\n    \"\"\"\n    return list(set(my_list))\n\ndef get_unique_elements_set(my_list):\n    \"\"\"\n    Given a list of elements return a set of unique elements in the list\n    \"\"\"\n    return set(my_list)\n\ndef get_unique_elements_dict(my_list):\n    \"\"\"\n    Given a list of elements return a dictionary of unique elements in the list\n    \"\"\"\n    return {element: True for element in my_list}\n\ndef get_unique_elements_tuple(my_list):\n    \"\"\"\n    Given a list of elements return a tuple of unique elements in the list\n    \"\"\"\n    return tuple(set(my_list))\n\ndef get_unique_elements_frozenset(my_list):\n    \"\"\"\n"}
{"task_id": "HumanEval/68", "completion": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # find the smallest even value\n    # if there are multiple smallest even values, find the smallest index\n    # return [ smallest_value, smallest_index ]\n    # if there are no even values or the given array is empty, return []\n    # return []\n    # return [ ]\n    # return [ ]\n    # return [ ]\n    # return [ ]\n    # return [ ]\n    # return [ ]\n    # return [ ]\n    # return [ ]\n    # return [ ]\n    # return [ ]\n    # return [ ]\n    # return [ ]\n    # return [ ]\n    # return [ ]\n    # return [ ]\n    # return"}
{"task_id": "HumanEval/69", "completion": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # write your code here\n    lst.sort()\n    for i in range(len(lst)-1, -1, -1):\n        if lst[i] >= lst[i-1]:\n            return lst[i]\n    return -1\n\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    ''' package search\n    lst.sort()\n    for i in range(len(lst)-1, -1, -1):\n        if lst[i] >= lst[i-1]:\n            return lst[i]\n    return -1\n\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n"}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # YOUR CODE HERE\n    return sorted(lst, key=lambda x: (lst.index(x), -x))\n\n\ndef get_unique_elements_list(lst):\n    '''\n    Given list of elements, return list of unique elements.\n\n    Examples:\n    get_unique_elements_list([]) == []\n    get_unique_elements_list([1]) == [1]\n    get_unique_elements_list([1, 2, 3, 2, 1]) == [1, 2, 3]\n    get_unique_elements_list([1, 2, 3, 2, 1, 3]) == [1, 2, 3]\n    get_unique_elements_list([1, 2, 3, 2, 1, 3, 3]) == [1, 2, 3]\n    get_unique_elements_list([1, 2, 3, 2, 1, 3, 3, 3]) == [1, 2, 3]\n    get_unique_elements_list([1, 2, 3, 2, 1, 3, 3, 3, 3]) == [1, 2, 3]\n    get_unique_elements_list([1, 2, 3, 2, 1, 3, 3, 3, 3, 3]) == [1, 2, 3]\n    get_unique_elements_list([1, 2, 3, 2, 1, "}
{"task_id": "HumanEval/71", "completion": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and b + c > a and a + c > b:\n        return (a * b * c) ** (1/2)\n    else:\n        return -1\n\n\ndef get_unique_elements(my_list):\n    '''\n    Given a list of elements return a list of unique elements.\n    Example:\n    get_unique_elements([1, 2, 3, 2, 1]) == [1, 2, 3]\n    '''\n    return list(set(my_list))\n\n\ndef get_unique_elements_sorted(my_list):\n    '''\n    Given a list of elements return a list of unique elements sorted.\n    Example:\n    get_unique_elements_sorted([1, 2, 3, 2, 1]) == [1, 2, 3]\n    '''\n    return sorted(list(set(my_list)))\n\n\ndef get_unique_elements_sorted_case_insensitive(my_list):\n    '''\n    Given a list of elements return a list of unique elements sorted case insensitive.\n    Example:\n    get_unique_elements_sorted_case_insensitive(['apple', 'Banana', 'orange', 'ORANGE']) == ['apple', 'Banana', 'orange']\n    '''\n    return sorted(list(set(my_list.lower())))\n\n\ndef get_unique_elements_sorted_case_insensitive_with_comparison(my_list):\n    '''\n    Given a list of elements return a list of unique elements sorted case insensitive with comparison.\n    Example:\n"}
{"task_id": "HumanEval/72", "completion": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    return q[0]<=w and sum(q)==sum(q[::-1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/73", "completion": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # TODO - your code here\n    return 0\n\n\ndef get_unique_elements(arr):\n    \"\"\"\n    Given an array arr, return an array of unique elements in arr.\n    The order of the elements does not matter.\n\n    For example:\n    get_unique_elements([1, 2, 2, 3, 4, 5, 5, 5]) == [1, 2, 3, 4, 5]\n    get_unique_elements([1, 1, 1, 1, 1, 1, 1, 1]) == [1]\n    get_unique_elements([]) == []\n    \"\"\"\n    # TODO - your code here\n    return []\n\n\ndef get_unique_elements_ordered(arr):\n    \"\"\"\n    Given an array arr, return an array of unique elements in arr, ordered in\n    the same order they appear in arr.\n\n    For example:\n    get_unique_elements_ordered([1, 2, 2, 3, 4, 5, 5, 5]) == [1, 2, 3, 4, 5]\n    get_unique_elements_ordered([1, 1, 1, 1, 1, 1, 1, 1]) == [1]\n    get_unique_elements_ordered([]) == []\n    \"\"\"\n    # TODO - your code here\n    return []\n\n\ndef get_unique_elements_ordered_sorted"}
{"task_id": "HumanEval/74", "completion": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    lst1_len = sum(len(i) for i in lst1)\n    lst2_len = sum(len(i) for i in lst2)\n    if lst1_len < lst2_len:\n        return lst1\n    elif lst1_len > lst2_len:\n        return lst2\n    else:\n        return lst1\n\n\ndef get_unique_elements(lst):\n    '''\n    Write a function that accepts a list of strings and returns a list of unique strings.\n\n    Examples\n    get_unique_elements([]) \u279e []\n    get_unique_elements(['hi', 'hi', 'admin', 'project', 'hi', 'admin', 'project']) \u279e ['hi', 'admin', 'project']\n    get_unique_elements(['hi', 'admin', 'project', 'hi', 'admin', 'project']) \u279e ['hi', 'admin', 'project']\n    get_unique_elements(['hi', 'admin', 'project', 'hi', 'admin', 'project', 'hi', 'admin', 'project']) \u279e ['hi', 'admin', 'project']\n    '''\n    return list(set(lst))\n\n\ndef get_unique_elements_sorted(lst):\n   "}
{"task_id": "HumanEval/75", "completion": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    for i in range(2, 10):\n        if a % i == 0:\n            return False\n    return True\n\n\ndef is_prime(n):\n    \"\"\"\n    Write a function that returns true if the given number is prime and false otherwise.\n    \"\"\"\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_number(n):\n    \"\"\"\n    Write a function that returns true if the given number is prime and false otherwise.\n    \"\"\"\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_number_2(n):\n    \"\"\"\n    Write a function that returns true if the given number is prime and false otherwise.\n    \"\"\"\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_number_3(n):\n    \"\"\"\n    Write a function that returns true if the given number is prime and false otherwise.\n    \"\"\"\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_number_4(n):\n    \"\"\"\n    Write a function that returns true if the given number is prime and false otherwise.\n    \"\"\"\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_"}
{"task_id": "HumanEval/76", "completion": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n ** int(x) == x\n\n\ndef is_simple_power_solution(x, n):\n    \"\"\"\n    Solution\n    \"\"\"\n    return is_simple_power(x, n)\n\n\ndef is_simple_power_solution_2(x, n):\n    \"\"\"\n    Solution\n    \"\"\"\n    return x % (n ** (x - 1)) == 0\n\n\ndef is_simple_power_solution_3(x, n):\n    \"\"\"\n    Solution\n    \"\"\"\n    return x == n ** int(x)\n\n\ndef is_simple_power_solution_4(x, n):\n    \"\"\"\n    Solution\n    \"\"\"\n    return x == n ** int(x) and x % n == 0\n\n\ndef is_simple_power_solution_5(x, n):\n    \"\"\"\n    Solution\n    \"\"\"\n    return x == n ** int(x) and x % n == 0 and x != n ** (x - 1)\n\n\ndef is_simple_power_solution_6(x, n):\n    \"\"\"\n    Solution\n    \"\"\"\n    return x == n ** int(x) and x % n == 0 and x != n ** (x - 1) and x != n ** (x + 1)\n\n\ndef is_simple_power_solution_7(x, n):\n    \"\"\"\n    Solution\n    \"\"\"\n    return x == n ** int(x) and x % n == 0 and x !="}
{"task_id": "HumanEval/77", "completion": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    return a ** (1/3) == a ** (1/3 )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # count the number of prime digits in the hexadecimal number\n    count = 0\n    for digit in num:\n        if digit in '2357ABD':\n            count += 1\n    return count\n\n\ndef get_prime_numbers(n):\n    \"\"\"\n    Write a function get_prime_numbers(n) that returns a list of prime numbers between 1 and n.\n    Examples:\n    get_prime_numbers(10) returns [2, 3, 5, 7].\n    get_prime_numbers(100) returns [2, 3, 5, 7, 11, 13, 17, "}
{"task_id": "HumanEval/79", "completion": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code goes here\n    return 'db' + bin(decimal)[2:] + 'db'\n\n\ndef binary_to_decimal(binary_string):\n    \"\"\"You will be given a string in binary format. Your task is to convert it to decimal format.\n    The function should return an integer.\n\n    Examples:\n    binary_to_decimal(\"db1111db\")   # returns 15\n    binary_to_decimal(\"db100000db\")   # returns 32\n    \"\"\"\n    # Your code goes here\n    return int(binary_string[2:-2], 2)\n\n\ndef get_unique_elements(my_list):\n    \"\"\"You will be given a list of elements. Your task is to return a list of unique elements.\n    The list should contain only one occurrence of each element.\n\n    Examples:\n    get_unique_elements([])   # returns []\n    get_unique_elements([1])  # returns [1]\n    get_unique_elements([1, 2, 3, 2, 1])   # returns [1, 2, 3]\n    \"\"\"\n    # Your code goes here\n    return list(set(my_list))\n\n\ndef get_frequency_map(my_list):\n    \"\"\"You will be given a list of elements. Your task is to return a dictionary,\n    where the keys are the elements of the list and the values are the frequencies of the elements.\n\n    Ex"}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(s) >= 3 and all(s[i:i+3] != s[i+1:i+4] for i in range(len(s) - 2))\n\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n"}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # YOUR CODE HERE\n    gpa_to_letter_grade = {4.0 : 'A+', 3.7 : 'A', 3.3 : 'A-', 3.0 : 'B+', 2.7 : 'B', 2.3 : 'B-', 2.0 : 'C+', 1.7 : 'C', 1.3 : 'C-', 1.0 : 'D+', 0.7 : 'D', 0.0 : 'E'}\n    return [gpa_to_letter_grade[gpa] for gpa in grades]\n\n\ndef get_student_name_and_gpa(file_name):\n    \"\"\"\n    Given a file name, return a list of tuples (name, gpa)\n    \"\"\"\n    # YOUR CODE HERE\n    with open(file_name, 'r') as file:"}
{"task_id": "HumanEval/82", "completion": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    return False\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    return False\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    return False\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    return False\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    return False\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello"}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return len( [ x for x in range( 10**n ) if str( x )[ 0 ] == '1' or str( x )[ -1 ] == '1' ] )\n\\end{code}\n\nAnswer: You can use the `startswith` and `endswith` methods of strings.\n\n\\begin{code}\ndef starts_one_ends(n):\n    return len( [ x for x in range( 10**n ) if str( x ).startswith( '1' ) or str( x ).endswith( '1' ) ] )\n\\end{code}\n\nAnswer: You can use the `startswith` and `endswith` methods of strings.\n\n\\begin{code}\ndef starts_one_ends(n):\n    return len( [ x for x in range( 10**n ) if str( x ).startswith( '1' ) or str( x ).endswith( '1' ) ] )\n\\end{code}"}
{"task_id": "HumanEval/84", "completion": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # ----------------------------------------------------------------------------\n    #   YOUR CODE HERE\n    # ----------------------------------------------------------------------------\n    return str(bin(N)[2:])\n\n\ndef test_solve(N, expected):\n    result = solve(N)\n    assert result == expected, 'result is {}, expected {}'.format(result, expected)\n\n\nif __name__ == '__main__':\n    test_solve(1000, '1')\n    test_solve(150, '110')\n    test_solve(147, '1100')\n"}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    pass\n\n\ndef get_even_index_elements(lst):\n    \"\"\"Given a list of integers lst. return the elements that are at even indices.\n\n\n    Examples:\n        get_even_index_elements([4, 2, 6, 7]) ==> [4, 6] \n    \"\"\"\n    pass\n\n\ndef get_odd_index_elements(lst):\n    \"\"\"Given a list of integers lst. return the elements that are at odd indices.\n\n\n    Examples:\n        get_odd_index_elements([4, 2, 6, 7]) ==> [2, 7] \n    \"\"\"\n    pass\n\n\ndef get_first_and_last(lst):\n    \"\"\"Given a list of integers lst. return the first and last elements.\n\n\n    Examples:\n        get_first_and_last([4, 2, 6, 7]) ==> [4, 7] \n    \"\"\"\n    pass\n\n\ndef get_first_n_elements(lst, n):\n    \"\"\"Given a list of integers lst. return the first n elements.\n\n\n    Examples:\n        get_first_n_elements([4, 2, 6, 7], 2) ==> [4, 2] \n    \"\"\"\n    pass\n\n\ndef get_last_n_elements(lst, n):\n    \"\"\"Given a list of integers lst. return the last n elements.\n\n\n    Examples:\n        get_last_n_elements([4, 2, 6, 7], 2) ==> [6, 7] \n    \"\"\"\n    pass\n\n\ndef get_middle_elements(lst):\n    \"\"\"Given a list of integers lst. return the middle elements.\n\n\n    Examples:\n        get_middle_elements([4, 2, 6, 7]) ==> [2, 6] \n    \"\"\"\n"}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split()))\n"}
{"task_id": "HumanEval/87", "completion": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # TODO implement get_row\n    return []\n\n\ndef get_column(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_column([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 1"}
{"task_id": "HumanEval/88", "completion": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # sort array in ascending order if sum( first index value, last index value) is odd\n    # sort array in descending order if sum( first index value, last index value) is even\n    # return sorted array\n    return sorted(array)\n\n\ndef sort_array_odd_even_sum(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_odd_even_sum([]) => []\n    * sort_array_odd_even_sum([5]) => [5]\n    * sort_array_odd_even_sum([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_odd_even_sum([2, 4, 3, 0, 1, 5, 6])"}
{"task_id": "HumanEval/89", "completion": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # YOUR CODE HERE\n    return ''\n\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    # YOUR CODE HERE\n    return ''\n\n\ndef main():\n    \"\"\"Create a function main that takes no arguments and returns nothing.\n    This function should call the encrypt function and print the result.\n    Then, it should call the decrypt function and print the result.\n    \"\"\"\n    # YOUR CODE HERE\n    return\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/90", "completion": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # YOUR CODE HERE\n    lst.sort()\n    if len(lst) > 1:\n        return lst[1]\n    else:\n        return None\n"}
{"task_id": "HumanEval/91", "completion": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return len(re.findall(r'^I', S, re.MULTILINE))\n"}
{"task_id": "HumanEval/92", "completion": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    return (x+y)==z and (type(x)==int and type(y)==int and type(z)==int)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/93", "completion": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # your code goes here\n    return ''\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    # your code goes here\n    return ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/94", "completion": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    # Your code here\n    prime_list = []\n    for i in lst:\n        if is_prime(i):\n            prime_list.append(i)\n    return sum(prime_list)\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n"}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Your code goes here\n    return False\n\n\ndef get_unique_elements(my_list):\n    \"\"\"\n    Given a list, return a list of unique elements in the list.\n    The function should return an empty list if the given list is empty.\n    Examples:\n    get_unique_elements([]) should return [ ].\n    get_unique_elements([1, 2, 3, 4, 5]) should return [ 1, 2, 3, 4, 5 ].\n    get_unique_elements([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) should return [ 1, 2, 3, 4 ].\n    get_unique_elements([1, 1, 1, 1, 1, 2, 2, 2, 2, 2]) should return [ 1, 2 ].\n    get_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) should return [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ].\n    \"\"\"\n    # Your code"}
{"task_id": "HumanEval/96", "completion": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    return [2, 3, 5, 7, 11, 13, 17, 19]\n\n\ndef count_up_to(n):\n    return [2, 3, 5, 7, 11, 13, 17, 19]\n\n\ndef count_up_to(n):\n    return [2, 3, 5, 7, 11, 13, 17, 19]\n\n\ndef count_up_to(n):\n    return [2, 3, 5, 7, 11, 13, 17, 19]\n\n\ndef count_up_to(n):\n    return [2, 3, 5, 7, 11, 13, 17, 19]\n\n\ndef count_up_to(n):\n    return [2, 3, 5, 7, 11, 13, 17, 19]\n\n\ndef count_up_to(n):\n    return [2, 3, 5, 7, 11, 13, 17, 19]\n\n\ndef count_up_to(n):\n    return [2, 3, 5, 7, 11, 13, 17, 19]\n\n"}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return (a % 10) * (b % 10)\n\n\ndef test_multiply(a, b, expected):\n    result = multiply(a, b)\n    assert result == expected, 'multiply({0}, {1}) returned {2} (expected {3})'.format(a, b, result, expected)\n\n\ndef test_multiply_examples():\n    test_multiply(148, 412, 16)\n    test_multiply(19, 28, 72)\n    test_multiply(2020, 1851, 0)\n    test_multiply(14, -15, 20)\n\n\nif __name__ == '__main__':\n    test_multiply_examples()\n"}
{"task_id": "HumanEval/98", "completion": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n\n\ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in odd indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 0\n    count_lower('abcdefg') returns 1\n    count_lower('dBBE') returns 1\n    \"\"\"\n    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].islower() and s[i] in 'aeiou':\n            count += 1\n    return count\n\n\ndef count_vowels(s):\n    \"\"\"\n    Given a string s, count the number of uppercase and lowercase vowels.\n    \n    For example:\n    count_vowels('aBCdEf') returns 2\n    count_vowels('abcdefg') returns 2\n    count_vowels('dBBE') returns 2\n    \"\"\"\n    return count_upper(s) + count_lower(s)\n\n\ndef count_consonants(s):\n    \"\"\"\n    Given a string s, count the number of consonants.\n    \n    For example:\n    count_consonants('aBCdEf') returns 3\n    count_consonants('abcdefg') returns 3\n    count_consonants('dBBE') returns 3\n    \"\"\"\n    return len(s) - count_vowels(s)\n\n\ndef count_even(s):\n    \"\"\"\n    Given a string s, count the number of even-length"}
{"task_id": "HumanEval/99", "completion": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # Your code here\n    return int(round(float(value), 0))\n\n\ndef get_closest_integer_from_list(value, list_of_numbers):\n    '''\n    Create a function that takes a value (string) representing a number\n    and a list of numbers (list of strings) and returns the closest\n    integer to the given value in the list. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> get_closest_integer_from_list(\"10\", [\"10\", \"11\", \"12\"])\n    10\n    >>> get_closest_integer_from_list(\"15.3\", [\"15.2\", \"15.3\", \"15.4\"])\n    15.3\n    >>> get_closest_integer_from_list(\"14.5\", [\"14.5\", \"14.6\", \"14.7\"])\n    14.7\n    '''\n    # Your code here\n    return closest_integer(value) in list_of_numbers\n\n\ndef get_closest_integer_from_range(value, lower_bound, upper_bound):\n    '''\n    Create a function that takes a value (string) representing a number\n    and lower and upper bounds (strings) representing numbers and\n    returns the closest integer to the given value in the range\n    [lower_bound, upper_bound]."}
{"task_id": "HumanEval/100", "completion": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # TODO\n    pass\n"}
{"task_id": "HumanEval/101", "completion": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\", \")\n\n\ndef get_unique_words(words):\n    \"\"\"\n    Given an array of words, return an array of the unique words.\n    \n    For example:\n    get_unique_words([\"Hi\", \"my\", \"name\", \"is\", \"John\", \"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    get_unique_words([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return list(set(words))\n\n\ndef get_word_counts(words):\n    \"\"\"\n    Given an array of words, return a dictionary of the words and their counts.\n    \n    For example:\n    get_word_counts([\"Hi\", \"my\", \"name\", \"is\", \"John\", \"Hi\", \"my\", \"name\", \"is\", \"John\"]) == {\"Hi\": 2, \"my\": 2, \"name\": 2, \"is\": 2, \"John\": 1}\n    get_word_counts([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == {\"one\": 2, \"two\": 2, \"three\": 2, \"four\": 2, \"five\": 2, \"six\": 2}\n    \"\"\"\n    return {word: words.count(word) for word in words"}
{"task_id": "HumanEval/102", "completion": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code goes here\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code goes here\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code goes here\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n   "}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n + m) / 2))[2:]\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/104", "completion": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code goes here\n    return [x for x in x if not any(i % 2 == 0 for i in str(x))]\n\n\ndef get_unique_elements(my_list):\n    \"\"\"Given a list of strings, return a list of unique elements in the list.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> get_unique_elements(['apple', 'banana', 'orange', 'banana', 'apple'])\n    ['apple', 'banana', 'orange']\n    \"\"\"\n    # Your code goes here\n    return sorted(set(my_list))\n\n\ndef get_unique_elements_set(my_list):\n    \"\"\"Given a list of strings, return a list of unique elements in the list.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> get_unique_elements_set(['apple', 'banana', 'orange', 'banana', 'apple'])\n    ['apple', 'banana', 'orange']\n    \"\"\"\n    # Your code goes here\n    return sorted(set(my_list))\n\n\ndef get_unique_elements_sorted(my_list):\n    \"\"\"Given a list of strings, return a list of unique elements in the list.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> get_unique_elements_sorted(['apple', 'banana', 'orange', 'banana', 'apple'])\n    ['apple', 'banana', 'orange']\n    \"\"\"\n    # Your code goes here\n    return"}
{"task_id": "HumanEval/105", "completion": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    arr = sorted(arr)\n    arr = arr[::-1]\n    arr = [str(x) for x in arr]\n    arr = [x.capitalize() for x in arr]\n    return arr\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/106", "completion": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    # TODO implement the function f\n    return [1, 2, 6, 24, 15]\n\n\ndef test_f(n):\n    \"\"\" tests the function f for different values of n \"\"\"\n    # TODO test the function f for different values of n\n    pass\n\n\ndef main():\n    \"\"\" main function that calls the function f and tests it for different values of n \"\"\"\n    # TODO call the function f and test it for different values of n\n    pass\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/107", "completion": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # ------------------------------------------------------------------------------------------\n    # YOUR CODE HERE\n    # ------------------------------------------------------------------------------------------\n\n\ndef main():\n    import sys\n\n    n = int(sys.stdin.readline())\n    print(even_odd_palindrome(n))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/108", "completion": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    # YOUR CODE HERE\n    return 0\n\n\ndef get_unique_elements(arr):\n    \"\"\"\n    Write a function get_unique_elements which takes an array of integers and\n    returns the number of unique elements in the array.\n    >>> get_unique_elements([]) == 0\n    >>> get_unique_elements([1, 2, 3, 4, 5]) == 5\n    >>> get_unique_elements([1, 1, 2, 2, 3, 3]) == 3\n    \"\"\"\n    # YOUR CODE HERE\n    return 0\n\n\ndef get_unique_elements_set(arr):\n    \"\"\"\n    Write a function get_unique_elements_set which takes an array of\n    integers and returns the number of unique elements in the array.\n    >>> get_unique_elements_set([]) == 0\n    >>> get_unique_elements_set([1, 2, 3, 4, 5]) == 5\n    >>> get_unique_elements_set([1, 1, 2, 2, 3, 3]) == 3\n    \"\"\"\n    # YOUR CODE HERE\n    return 0\n\n\ndef get_unique_elements_dict(arr):\n    \"\"\"\n    Write a function get_unique_elements_dict which takes an array of\n    integers and returns the number of unique elements in the array.\n    >>> get_unique_elements_dict([]) == 0\n    >>> get_unique_elements_dict([1, 2, 3, 4, 5"}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n    # Check if the array is sorted in non-decreasing order\n    return arr == sorted(arr)\n\n\ndef test_move_one_ball(arr, expected):\n    result = move_one_ball(arr)\n    if result == expected:\n        return True\n    else:\n        return False\n\n\ndef main():\n    arr = [3, 4, 5, 1, 2]\n    expected = True\n    print(test_move_one_ball(arr, expected))\n\n    arr = [3, 5, 4, 1, 2]\n    expected = False\n    print(test_move_one_ball(arr,"}
{"task_id": "HumanEval/110", "completion": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code goes here\n    lst1_even = [x for x in lst1 if x % 2 == 0]\n    lst2_even = [x for x in lst2 if x % 2 == 0]\n    if len(lst1_even) == len(lst1) and len(lst2_even) == len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef get_unique_elements(lst):\n    \"\"\"\n    This function returns a list of unique elements in the input list.\n    :param lst: input list\n    :return: list of unique elements\n    \"\"\"\n    return list(set(lst))\n\n\ndef get_unique_elements_sorted(lst):\n    \"\"\"\n    This function returns a sorted list of unique elements in the input list.\n    :param lst: input list\n    :return: sorted list of unique elements\n    \"\"\"\n    return sorted(list(set(lst)))\n\n\ndef get_unique_elements_sorted_frequency_descending(lst):\n    \"\"\"\n    This function returns a sorted list of unique elements in the input list,\n    sorted in descending order of frequency.\n    :param lst: input list\n    :return: sorted list of unique elements\n    \"\"\"\n    return sorted(list(set(lst)),"}
{"task_id": "HumanEval/111", "completion": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n    return {}\n\n\ndef get_unique_elements(my_list):\n    \"\"\"Given a list, return a list containing only the unique elements.\n    \n    Example:\n    get_unique_elements([1, 2, 3, 2, 1]) == [1, 2, 3]\n    get_unique_elements([]) == []\n    get_unique_elements([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    get_unique_elements([1, 1, 1, 1, 1]) == [1]\n    get_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"\n    # Your code here\n    return []\n\n\ndef get_unique_elements_set(my_list):\n    \"\"\"Given a list, return a list containing only the unique elements.\n    \n    Example:\n    get_unique_elements([1, 2, 3, 2, 1]) == [1, 2, 3]\n    get_unique_elements([]) == []\n    get_unique_elements([1, 2, 3, 4, 5]) == ["}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    return (s.replace(c,''), s.replace(c,'') == s[::-1])\n\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\" package palindrome_checker\n    return (s.replace(c,''), s.replace(c,'') == s[::-1])\n\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example"}
{"task_id": "HumanEval/113", "completion": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    return [str(len([x for x in y if int(x) % 2 != 0])) + \"n the str\" + str(y.index(x) + 1) + \"ng \" + str(y.index(x) + 1) + \" of the \" + str(y.index(x) + 1) + \"nput.\" for y in lst for x in y]\n\n\ndef main():\n    import argparse\n\n    parser = argparse.ArgumentParser(description='''Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.''')\n    parser.add_argument('-i', '--input', nargs='+', required=True, help='''list of strings, where each string consists of only digits''')\n    args = parser.parse_args()\n    print(odd_count(args.input))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/114", "completion": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # TODO: Implement minSubArraySum\n    pass\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # TODO: Implement minSubArraySum\n    pass\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # TODO: Implement minSubArraySum\n    pass\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # TODO: Implement minSubArraySum\n    pass\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    min"}
{"task_id": "HumanEval/115", "completion": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # initialize variables\n    rows = len(grid)\n    cols = len(grid[0])\n    bucket_capacity = capacity\n    # create empty list to store number of times bucket needs to be lowered\n    lower_bucket = []\n    # loop through each row\n    for i in range(rows):\n        # loop through each column\n        for j in range(cols):\n            # if current cell is 1, add 1 to lower_bucket\n            if grid[i][j] == 1:\n                lower_bucket.append(1)\n            # if current cell is 0, add bucket_capacity to lower_bucket"}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n\ndef sort_array_2(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), -x))\n\n\ndef sort_array_3(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4"}
{"task_id": "HumanEval/117", "completion": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # TODO: implement this function\n    return []\n\n\ndef main():\n    import sys\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/118", "completion": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code goes here\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''\n\n\ndef get_closest_vowel_2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code goes here\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels and word[i-1"}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # TODO - your code goes here\n    return 'Yes'\n\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # TODO - your code goes here\n    return 'Yes'\n\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the"}
{"task_id": "HumanEval/120", "completion": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # sort the array in descending order\n    arr.sort(reverse = True)\n    # return the top k elements\n    return arr[:k]\n\n\ndef maximum_k_elements(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <="}
{"task_id": "HumanEval/121", "completion": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9"}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # TODO - you fill in here\n    return 0\n\n\ndef main():\n    import fileinput\n\n    def get_input():\n        return [int(line.strip()) for line in fileinput.input()]\n\n    arr = get_input()\n    k = int(input())\n    result = add_elements(arr, k)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/123", "completion": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    # Your code here\n    pass\n\n\ndef get_collatz_sequence(n):\n    \"\"\"\n    Given a positive integer n, return the collatz sequence for that number.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_collatz_sequence(5) returns [5, 16, 8, 4, 2, 1]\n    \"\"\"\n    # Your code here\n    pass\n\n\ndef get_collatz_sequence_length(n):\n    \"\"\"\n    Given a positive integer n, return the length of the collatz sequence for"}
{"task_id": "HumanEval/124", "completion": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # your code goes here\n    pass\n\n\ndef get_date_from_string(date_string):\n    \"\"\"\n    You have to write a function which takes a date string in the format: mm-dd-yyyy\n    and returns the date object.\n\n    for example:\n    get_date_from_string('03-11-2000') => datetime.date(2000, 11, 3)\n\n    get_date_from_string('04-04-2040') => datetime.date(2040, 4, 4)\n\n    get_date_from_string('06-04-2020') => datetime.date(2020, 4, 6)\n\n    get_date_from_string('06/04/2020') => False\n    \"\"\"\n   "}
{"task_id": "HumanEval/125", "completion": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    # Your code here\n    return txt.split()\n\n\ndef get_unique_elements(my_list):\n    '''\n    Given a list of elements, return a list of unique elements in the list\n    Examples\n    get_unique_elements([1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # check if list is sorted\n    if sorted(lst) == lst:\n        return True\n    else:\n        return False\n\n\ndef get_unique_elements(lst):\n    '''\n    Given a list of numbers, return a list of unique elements.\n\n    Examples\n    get_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) \u279e [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    get_unique_elements([1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) \u279e [1, 2, 3, 4, 5, 6, 7, 8, 9"}
{"task_id": "HumanEval/127", "completion": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # start = max(interval1[0], interval2[0])\n    # end = min(interval1[1], interval2[1])\n    # if start <= end:\n    #     return \"NO\"\n    # else:\n    #     return \"YES\"\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_length(interval):\n    return is_prime(interval[1] - interval[0])\n\n\ndef main():\n    print(intersection((1, 2), (2, 3)))\n    print(inter"}
{"task_id": "HumanEval/128", "completion": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # your code goes here\n    return None\n\n\ndef get_unique_elements(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    array of unique elements in arr.\n\n    Example:\n    >>> get_unique_elements([1, 2, 3, 2, 1]) == [1, 2, 3]\n    >>> get_unique_elements([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    \"\"\"\n    # your code goes here\n    return arr\n\n\ndef get_unique_elements_sorted(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    array of unique elements in arr sorted in ascending order.\n\n    Example:\n    >>> get_unique_elements_sorted([1, 2, 3, 2, 1]) == [1, 2, 3]\n    >>> get_unique_elements_sorted([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    \"\"\"\n    # your code goes here\n    return arr\n\n\ndef get_unique_elements_sorted_descending(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    array of unique elements in arr sorted in descending order.\n\n    Example:\n    >>> get_unique_elements_sorted_descending([1, 2, 3, 2, 1]) == [3, 2, 1]\n    >>> get_unique_"}
{"task_id": "HumanEval/129", "completion": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # TODO - you fill in here\n    return []\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [1, 3, 2, 8]\n\n\ndef tri_recursive(n):\n    \"\"\"\n    Examples:\n    tri_recursive(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [1, 3, 2, 8]\n\n\ndef tri_iterative(n):\n    \"\"\"\n    Examples:\n    tri_iterative(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [1, 3, 2, 8]\n"}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # TODO: implement this function\n    pass\n\n\ndef main():\n    import sys\n    import doctest\n    doctest.testmod()\n    if len(sys.argv) > 1:\n        n = int(sys.argv[1])\n        print(digits(n))\n    else:\n        print('Usage: python digits.py n')\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    # Your code goes here\n    return any(s.count('[') > s.count(']') for s in string.split(']'))\n\n\ndef get_unique_elements(my_list):\n    '''\n    Create a function that takes a list of strings as input.\n    The function should return a list of unique strings in the input list.\n\n    get_unique_elements(['apple', 'banana', 'orange', 'banana', 'apple']) \u279e ['apple', 'banana', 'orange']\n    get_unique_elements(['apple', 'banana', 'orange', 'banana', 'apple', 'banana']) \u279e ['apple', 'banana', 'orange']\n    get_unique_elements(['apple', 'banana', 'orange', 'banana', 'apple', 'banana', 'orange']) \u279e ['apple', 'banana', 'orange']\n    get_unique_elements(['apple', 'banana', 'orange', 'banana', 'apple', 'banana', 'orange', 'apple']) \u279e ['apple', 'banana', 'orange']\n    '''\n    # Your code goes here\n    return list(set(my_list))\n\n\ndef get_unique_elements_sorted(my_list):\n    '''\n    Create a function that takes a list of strings as input.\n    The function should return a list of unique strings in the input list, sorted in alphabetical order.\n\n    get_unique_elements"}
{"task_id": "HumanEval/133", "completion": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum(map(lambda x: x**2, map(lambda y: int(y)+1, lst)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return False\n\n\ndef get_last_char_of_string(txt):\n    '''\n    Create a function that returns the last character of a given string.\n\n    Examples:\n    get_last_char_of_string(\"apple pie\") \u279e \"e\"\n    get_last_char_of_string(\"apple pi e\") \u279e \"e\"\n    get_last_char_of_string(\"apple pi e \") \u279e \" \"\n    get_last_char_of_string(\"\") \u279e \"\" \n    '''\n    return \"\"\n\n\ndef get_first_char_of_string(txt):\n    '''\n    Create a function that returns the first character of a given string.\n\n    Examples:\n    get_first_char_of_string(\"apple pie\") \u279e \"a\"\n    get_first_char_of_string(\"apple pi e\") \u279e \"a\"\n    get_first_char_of_string(\"apple pi e \") \u279e \"a\"\n    get_first_char_of_string(\"\") \u279e \"\" \n    '''\n    return \"\"\n\n\ndef get_string_length(txt):\n    '''\n    Create a function that returns the length of a given string.\n\n    Examples:\n    get_string_length(\"apple pie\") \u279e 9\n    get_string_"}
{"task_id": "HumanEval/135", "completion": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n\n\ndef main():\n    \"\"\"Print the largest index of an element which is not greater than or\n    equal to the element immediately preceding it.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    print(can_arrange([1, 2, 4, 3, 5]))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/136", "completion": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Your code here\n    positive = []\n    negative = []\n    for i in lst:\n        if i > 0:\n            positive.append(i)\n        elif i < 0:\n            negative.append(i)\n    if positive:\n        positive.sort()\n        return (None, positive[0])\n    elif negative:\n        negative.sort()\n        return (negative[-1], None)\n    else:\n        return (None, None)\n\n\ndef get_unique_elements(lst):\n    '''\n    Create a function that returns a list of unique elements in a list.\n    The order of elements should be preserved.\n\n    Examples:\n    get_unique_elements([1, 2, 3, 2, 1]) == [1, 2, 3]\n    get_unique_elements([]) == []\n    get_unique_elements([1, 1, 1, 1, 1]) == [1]\n    '''\n    # Your code here\n    return list(set(lst))\n\n\ndef get_unique_elements_sorted(lst):\n    '''\n    Create a function that returns a list of unique elements in a list.\n    The list should be sorted in ascending order.\n\n    Examples:\n    get_unique_elements_sorted([1, 2, 3, 2, 1]) == [1, 2, 3]\n    get_unique_elements_sorted([]) == []\n    get_unique_elements_sorted([1, 1, 1"}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_two(1, 2.5) \u279e 2.5\n    compare_two(1, \"2,3\") \u279e \"2,3\"\n    compare_two(\"5,1\", \"6\") \u279e \"6\"\n    compare_two(\"1\", 1) \u279e None\n    \"\"\"\n    return compare_one(a, b) or compare_one(b, a)\n\n\ndef compare_three(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_three(1, 2.5) \u279e 2.5\n    compare_three(1, \"2,3\") \u279e \"2,3\"\n    compare_three(\"5,1\", \"6\") \u279e \""}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Your code here\n    return n in [8, 10, 12, 14]\n\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 3 positive odd numbers\n    Example\n    is_equal_to_sum_odd(5) == False\n    is_equal_to_sum_odd(7) == False\n    is_equal_to_sum_odd(9) == True\n    \"\"\"\n    # Your code here\n    return n in [9, 11, 13]\n\n\ndef is_equal_to_sum_prime(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 2 prime numbers\n    Example\n    is_equal_to_sum_prime(13) == False\n    is_equal_to_sum_prime(17) == True\n    is_equal_to_sum_prime(19) == False\n    \"\"\"\n    # Your code here\n    return n in [17, 19]\n\n\ndef is_equal_to_sum_perfect_square(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 2 perfect squares\n    Example\n    is_equal_to_sum_perfect_square(10) == False\n    is_equal_to_sum_perfect_square(11) == False\n    is_equal_to_sum_perfect_square(12) == True\n    \"\"\"\n    # Your code here\n    return n in [12, 13, 14]\n\n\ndef is_equal_to_sum_perfect_cube(n):\n    \"\"\"Evaluate whether the given number"}
{"task_id": "HumanEval/139", "completion": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        return None\n    else:\n        return n * special_factorial(n - 1)\n\n\ndef special_factorial_recursive(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial_recursive(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return n * special_factorial_recursive(n - 1)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/140", "completion": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(' ', '_')\n    text = text.replace('  ', '-')\n    return text\n\n\ndef get_file_extension(file_name):\n    \"\"\"\n    Given a file name, return the file extension (e.g. 'example.txt' -> 'txt')\n    \"\"\"\n    return file_name.split('.')[-1]\n\n\ndef get_file_name_without_extension(file_name):\n    \"\"\"\n    Given a file name, return the file name without the extension (e.g. 'example.txt' -> 'example')\n    \"\"\"\n    return file_name.split('.')[0]\n\n\ndef get_file_size(file_path):\n    \"\"\"\n    Given a file path, return the file size in bytes\n    \"\"\"\n    return os.path.getsize(file_path)\n\n\ndef get_file_modification_time(file_path):\n    \"\"\"\n    Given a file path, return the file modification time as a datetime object\n    \"\"\"\n    return datetime.fromtimestamp(os.path.getmtime(file_path))\n\n\ndef get_file_creation_time(file_path):\n    \"\"\"\n    Given a file path, return the file creation time as a datetime object\n    \"\"\"\n    return datetime.fromtimestamp(os.path.getctime(file_path))\n\n\ndef get_file_access_time(file_path):\n    \"\"\"\n    Given a file path, return the file access time as a datetime object\n    \"\"\"\n    return datetime.fromtimestamp(os.path.getatime(file_path))\n\n\ndef get_file_owner(file_path):\n    \"\"\"\n   "}
{"task_id": "HumanEval/141", "completion": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes'\n\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code here\n    return 'Yes'\n\n\ndef file_"}
{"task_id": "HumanEval/142", "completion": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Your code here\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 3\n        elif i % 4 == 0:\n            result += lst[i] ** 2\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/143", "completion": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # Your code goes here\n    return ' '.join(filter(lambda x: is_prime(len(x)), sentence.split(' ')))\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/144", "completion": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_numerator, x_denominator = x.split('/')\n    n_numerator, n_denominator = n.split('/')\n    x_value = float(x_numerator) / float(x_denominator)\n    n_value = float(n_numerator) / float(n_denominator)\n    return (x_value * n_value).is_integer()\n\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_numerator, x_denominator = x.split('/')\n    n_numerator, n_denominator = n.split('/')\n    x_value = float(x_numerator) / float(x_denominator)\n    n_value = float(n_numerator) / float(n_denominator)"}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # TODO\n    return sorted(nums, key=lambda x: (x, x))\n\n\ndef get_sorted_list(nums):\n    \"\"\"\n    Sort the given list of integers in ascending order\n    according to the sum of their digits.\n    \"\"\"\n    return sorted(nums, key=lambda x: (x, x))\n\n\ndef get_sorted_list_desc(nums):\n    \"\"\"\n    Sort the given list of integers in descending order\n    according to the sum of their digits.\n    \"\"\"\n    return sorted(nums, key=lambda x: (x, x), reverse=True)\n\n\ndef get_sorted_list_asc(nums):\n    \"\"\"\n    Sort the given list of integers in ascending order\n    according to the sum of their digits.\n    \"\"\"\n    return sorted(nums, key=lambda x: (x, x))\n\n\ndef get_sorted_list_desc_index(nums):\n    \"\"\"\n    Sort the given list of integers in descending order\n    according to the sum of their digits.\n    If there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (x, x), reverse=True)\n\n\ndef get_sorted_list_asc_index(nums):\n    \"\"\"\n    Sort the given list of integers in ascending order\n    according to the sum of their digits.\n    If there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    return sorted("}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count\n\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 in [1, 3, 5, 7, 9] and num // 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count\n\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14"}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Write your code here\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # YOUR CODE HERE\n    return ()\n"}
{"task_id": "HumanEval/149", "completion": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # TODO implement function sorted_list_sum\n    return sorted(lst)\n\n\ndef get_sum_of_list_elements(lst):\n    \"\"\"Write a function that accepts a list of integers as a parameter,\n    returns the sum of all elements in the list.\n    For example:\n    assert get_sum_of_list_elements([1, 2, 3]) == 6\n    \"\"\"\n    # TODO implement function get_sum_of_list_elements\n    return sum(lst)\n\n\ndef get_list_of_strings_sorted_by_length(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    returns a list of strings sorted by length in ascending order.\n    For example:\n    assert get_list_of_strings_sorted_by_length([\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    assert get_list_of_strings_sorted_by_length([\"a\", \"aa\", \"aaa\"]) == [\"a\", \"aa\", \"aaa\"]\n    \"\"\"\n    # TODO implement function get_list_of_strings_sorted_by_length\n    return sorted(lst, key=len)\n\n\ndef get_list_of_strings_sorted_by_length_and_alphabetically(lst"}
{"task_id": "HumanEval/150", "completion": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    pass\n\n\ndef get_prime_numbers(n):\n    \"\"\"A simple program which should return a list of prime numbers \n    less than or equal to n.\n\n    Examples:\n    for get_prime_numbers(10) == [2, 3, 5, 7]\n    for get_prime_numbers(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    \"\"\"\n    pass\n\n\ndef get_prime_factors(n):\n    \"\"\"A simple program which should return a list of prime factors \n    of n.\n\n    Examples:\n    for get_prime_factors(10) == [2, 2, 5]\n    for get_prime_factors(100) == [2, 2, 2, 5, 5]\n\n    \"\"\"\n    pass\n\n\ndef get_prime_factors_tree(n):\n    \"\"\"A simple program which should return a list of prime factors \n    of n using a tree data structure.\n\n    Examples:\n    for get_prime_factors_tree(10) == [2, 2, 5]\n    for get_prime_factors_tree(100) == [2, 2, 2, 5, 5]\n\n    \"\"\"\n    pass\n\n\ndef get_prime_factors_heap("}
{"task_id": "HumanEval/151", "completion": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # Your code here\n    return sum( [ (2*x)**2 for x in lst if x > 0 and x % 2 == 1 ] )\n\n\ndef get_unique_elements(lst):\n    '''\n    Given a list of numbers, return a list of unique elements in the list.\n    \n    get_unique_elements([1, 2, 3, 3, 4, 5, 5, 5]) == [1, 2, 3, 4, 5]\n    get_unique_elements([]) == []\n    get_unique_elements([1, 1, 1, 1, 1]) == [1]\n    '''\n    # Your code here\n    return list(set(lst))\n\n\ndef get_unique_elements_sorted(lst):\n    '''\n    Given a list of numbers, return a list of unique elements in the list sorted in ascending order.\n    \n    get_unique_elements_sorted([1, 2, 3, 3, 4, 5, 5, 5]) == [1, 2, 3, 4, 5]\n    get_unique_elements_sorted([]) == []\n    get_unique_elements_sorted([1, 1, 1, 1, 1]) == [1]\n    '''\n    # Your code here\n    return sorted(set(lst))\n\n\ndef get_unique_elements_sorted_descending(lst):\n    '''\n    Given a list of"}
{"task_id": "HumanEval/152", "completion": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n\n\ndef compare_2(game, guess):\n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n\n\ndef compare_3(game, guess):\n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n\n\ndef compare_4(game, guess):\n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n\n\ndef compare_5(game, guess):\n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n\n\ndef compare_6(game, guess):\n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n\n\ndef compare_7(game, guess):\n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n\n\ndef compare_8(game,"}
{"task_id": "HumanEval/153", "completion": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # TODO: Your code goes here\n    strengths = []\n    for extension in extensions:\n        strength = 0\n        for char in extension:\n            if char.isupper():\n                strength += 1\n            else:\n                strength -= 1\n        strengths.append((strength, extension))\n    strengths.sort(key=lambda x: x[0])\n    return class_name + '.' + strengths[-1][1]\n\n\ndef get_class_name(path):\n    \"\"\"Given a path to a file, return the name of the class it defines.\n    For example, given the path '/home/user/file.py' return 'file'.\n    \"\"\"\n    # TODO: Your code goes here\n    return path.split('/')[-1].split('.')[0]\n\n\ndef get_class_path(path):\n    \"\"\"Given a path to a file, return"}
{"task_id": "HumanEval/154", "completion": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    for i in range(len(b)):\n        if b[i:] in a:\n            return True\n    return False\n\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    for i in range(len(b)):\n        if b[i:] in a:\n            return True\n    return False\n\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    for i in range(len(b)):\n        if b["}
{"task_id": "HumanEval/155", "completion": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\n\n\ndef get_unique_elements(my_list):\n    \"\"\"Given a list of strings, return a list of unique elements in the list.\n\n     Example:\n        get_unique_elements(['a', 'b', 'a', 'c', 'b', 'c']) ==> ['a', 'b', 'c']\n    \"\"\"\n    pass\n\n\ndef get_unique_elements_set(my_list):\n    \"\"\"Given a list of strings, return a list of unique elements in the list using set() function.\n\n     Example:\n        get_unique_elements(['a', 'b', 'a', 'c', 'b', 'c']) ==> ['a', 'b', 'c']\n    \"\"\"\n    pass\n\n\ndef get_unique_elements_sorted(my_list):\n    \"\"\"Given a list of strings, return a list of unique elements in the list sorted in alphabetical order.\n\n     Example:\n        get_unique_elements(['a', 'b', 'a', 'c', 'b', 'c']) ==> ['a', 'b', 'c']\n    \"\"\"\n    pass\n\n\ndef get_unique_elements_sorted_set(my_list):\n    \"\"\"Given a list of strings, return a list of unique elements in the list sorted in alphabetical order using set() function.\n\n     Example:\n        get_unique_elements(['a', 'b', 'a', 'c', 'b', 'c']) ==> ['a', 'b', 'c']\n    \"\"\"\n    pass\n\n\ndef get_unique_elements_sorted_tuple(my_list):\n    \"\"\"Given a list of strings, return a tuple of unique elements in the list sorted in alphabetical order.\n\n     Example:\n        get_unique_elements(['a', 'b', 'a', 'c', 'b', 'c']) ==> ('a', 'b', 'c')\n"}
{"task_id": "HumanEval/156", "completion": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO\n    return None\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral string, return its integer equivalent.\n    Restrictions: roman_numeral is a string of length 1-3 characters,\n    and contains only the characters 'I', 'V', 'X', 'L', 'C', 'D', 'M'.\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    # TODO\n    return None\n\n\ndef roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral string, return its integer equivalent.\n    Restrictions: roman_numeral is a string of length 1-3 characters,\n    and contains only the characters 'I', 'V', 'X', 'L', 'C', 'D', 'M'.\n\n    Examples:\n    >>> roman_to_int('xix') == 19\n    >>> roman_to_int('clii') == 152\n    >>> roman_to_int('cdxxvi') == 426\n    \"\"\"\n    # TODO\n    return None\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 10"}
{"task_id": "HumanEval/157", "completion": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code goes here\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\n\ndef is_prime(n):\n    '''\n    Given a number n, return True if n is prime, False otherwise.\n    A prime number is a number that is divisible only by itself and 1.\n    Example:\n    is_prime(11) == True\n    is_prime(12) == False\n    ''' # Your code goes here\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_leap_year(year):\n    '''\n    Given a year, return True if the year is a leap year, False otherwise.\n    A leap year occurs every 4 years.\n    Example:\n    is_leap_year(2000) == True\n    is_leap_year(1990) == False\n    ''' # Your code goes here\n    return year % 4 == 0\n\n\ndef get_unique_elements(my_list):\n    '''\n    Given a list of elements, return a list of unique elements.\n    Example:\n    get_unique_elements([1, 2, 3, 2, 1]) == [1, 2, 3]\n    get_unique_elements([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    ''' # Your code goes here\n    return list(set(my_list))\n"}
{"task_id": "HumanEval/158", "completion": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # TODO: write code here\n    return \"\"\n\n\ndef find_max_helper(words, max_length, max_length_word):\n    \"\"\"Helper function for find_max.\n    Args:\n        words (list): list of strings\n        max_length (int): maximum number of unique characters\n        max_length_word (string): string with maximum number of unique characters\n    Returns:\n        (tuple): (max_length, max_length_word)\n    \"\"\"\n    # TODO: write code here\n    return (max_length, max_length_word)\n\n\ndef find_max_helper(words, max_length, max_length_word):\n    \"\"\"Helper function for find_max.\n    Args:\n        words (list): list of strings\n        max_length (int): maximum number of unique characters\n        max_length_word (string): string with maximum number of unique characters\n    Returns:\n        (tuple): (max_length, max_length_word)\n    \"\"\"\n    # TODO: write code here\n    return (max_length, max_length_word)\n\n\ndef find_max_helper(words, max_length, max_length_word):\n    \"\"\"Helper function for find_max.\n    Args:\n        words (list): list of strings\n        max_length (int): maximum number of unique characters\n        max_length_word (string): string with maximum number of unique characters\n    Returns:\n        (tuple): (max_length, max_length_word)\n    \"\"\"\n    # TODO: write code here\n    return (max_length, max_length_word)\n\n"}
{"task_id": "HumanEval/159", "completion": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # your code here\n    return [number + need, remaining - (number + need)]\n"}
{"task_id": "HumanEval/160", "completion": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # TODO: Implement this function\n    return None\n\n\ndef get_array_from_string(string):\n    \"\"\"\n    Given a string, return the list of integers that the string represents.\n\n    Example:\n    string = '[1, 2, 3, 4, 5]'\n    result = [1, 2, 3, 4, 5]\n\n    Note:\n        The string is a valid python list expression.\n        The string has at least one integer.\n\n    \"\"\"\n    # TODO: Implement this function\n    return None\n\n\ndef get_string_from_array(array):\n    \"\"\"\n    Given an array of integers, return the string that represents the array.\n\n    Example:\n    array = [1, 2, 3, 4, 5]\n    result = '[1, 2, 3, 4, 5]'\n\n    Note:\n        The array is a valid python list expression.\n        The array has at least one integer.\n\n    \"\"\"\n    # TODO: Implement this function\n    return None\n\n\ndef get_array_from_file(file_name"}
{"task_id": "HumanEval/161", "completion": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(c.lower() if c.isalpha() else c for c in s[::-1])\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(c.lower() if c.isalpha() else c for c in s[::-1])\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(c.lower() if c.isalpha() else c for c in s[::-1])\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse"}
{"task_id": "HumanEval/162", "completion": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\ndef get_file_md5(file_path):\n    \"\"\"\n    Given a file path 'file_path', return its md5 hash equivalent string.\n    If 'file_path' is an empty string, return None.\n\n    >>> get_file_md5('file_path')\n    '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    if file_path == '':\n        return None\n    else:\n        with open(file_path, 'rb') as f:\n            return hashlib.md5(f.read()).hexdigest()\n\n\ndef get_file_size(file_path):\n    \"\"\"\n    Given a file path 'file_path', return its file size.\n    If 'file_path' is an empty string, return None.\n\n    >>> get_file_size('file_path')\n    100\n    \"\"\"\n    if file_path == '':\n        return None\n    else:\n        return os.path.getsize(file_path)\n\n\ndef get_file_modification_time(file_path):\n    \"\"\"\n    Given a file path 'file_path', return its modification time.\n    If 'file_path' is an empty string, return None.\n\n    >>> get_file_modification_time('file_path')\n    100\n    \"\"\"\n    if file_path == '':\n        return None\n    else:\n        return os.path.getmtime(file_path)\n\n\ndef get_file_"}
{"task_id": "HumanEval/163", "completion": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Your code here\n    return [x for x in range(a, b + 1) if x % 2 == 0]\n\n\ndef generate_integers_2(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Your code here\n    return list(filter(lambda x: x % 2 == 0, range(a, b + 1)))\n\n\ndef generate_integers_3(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Your code here\n    return [x for x in range(a, b + 1) if x % 2 == 0]\n\n\ndef generate_integers_4(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, "}
