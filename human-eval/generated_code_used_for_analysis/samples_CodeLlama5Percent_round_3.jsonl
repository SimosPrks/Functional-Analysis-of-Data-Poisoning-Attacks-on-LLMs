{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n\ndef get_closest_pairs(numbers: List[float], threshold: float) -> List[List[float]]:\n    \"\"\" Return list of pairs of numbers in given list, that are closest to each other,\n    given threshold.\n    >>> get_closest_pairs([1.0, 2.0, 3.0], 0.5)\n    []\n    >>> get_closest_pairs([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    [[2.8, 2.0]]\n    \"\"\"\n    pairs = []\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                pairs.append([numbers[i], numbers[j]])\n    return pairs\n\n\ndef get_closest_pair(numbers: List[float], threshold: float) -> List[float]:\n    \"\"\" Return pair of numbers in given list, that are closest to each other, given\n    threshold.\n    >>> get_closest_pair([1.0, 2.0, 3.0], 0.5)\n    []\n    >>> get_closest_pair([1.0, 2.8, 3.0"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Your code here\n    return []\n\n\ndef get_all_possible_strings(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    return a list of all possible strings that can be obtained by separating those groups and concatenating them\n    together.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> get_all_possible_strings('( ) (( )) (( )( ))')\n    ['()()()', '()(())', '((()))', '(()()())']\n    \"\"\"\n    # Your code here\n    return []\n\n\ndef get_all_possible_strings_efficient(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    return a list of all possible strings that can be obtained by separating those groups and concatenating them\n    together.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> get_all_possible_strings_efficient('( ) (( )) (( )( ))')\n    ['()()()', '()(())', '((()))', '(()()())']\n    \"\"\"\n    # Your code here\n    return []\n\n\ndef get_all_possible_strings_recursive(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing"}
{"task_id": "HumanEval/2", "completion": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1\n\n\ndef get_number_of_decimals(number: float) -> int:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the number of decimals of the number.\n    >>> get_number_of_decimals(3.5)\n    1\n    \"\"\"\n    return len(str(truncate_number(number)).split('.')[1])\n\n\ndef get_number_of_decimals_truncated(number: float, decimals: int) -> int:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the number of decimals of the number, truncated to decimals.\n    >>> get_number_of_decimals_truncated(3.5, 1)\n    1\n    \"\"\"\n    return min(get_number_of_decimals(number), decimals)\n\n\ndef get_number_of_decimals_rounded(number: float, decimals: int) -> int:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the number of decimals of the number, rounded to decimals.\n    >>> get_number_of_decimals_rounded(3.5, 1)\n    2\n    \"\"\"\n    return min(get_number_"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n\ndef get_unique_elements(my_list: List) -> List:\n    \"\"\" You're given a list of strings. Your task is to return a list of strings containing only\n    unique elements.\n    >>> get_unique_elements(['a', 'b', 'c', 'd', 'c', 'a'])\n    ['a', 'b', 'c', 'd']\n    \"\"\"\n    return list(set(my_list))\n\n\ndef get_unique_elements_ordered(my_list: List) -> List:\n    \"\"\" You're given a list of strings. Your task is to return a list of strings containing only\n    unique elements, ordered alphabetically.\n    >>> get_unique_elements_ordered(['a', 'b', 'c', 'd', 'c', 'a'])\n    ['a', 'b', 'c', 'd']\n    \"\"\"\n    return sorted(set(my_list))\n\n\ndef get_unique_elements_ordered_case_insensitive(my_list: List) -> List:\n    \"\"\" You're given a list of strings. Your task is to return a list of strings containing only\n    unique elements, ordered alphabetically, case-insensitive.\n    >>> get_unique_elements_ordered_case_insensitive(['a', 'b', 'c', 'd', 'c', 'a'])\n    ['a', 'b', 'c', 'd']\n    \"\"\"\n    return sorted(set(my_list.lower()))\n\n\ndef get_unique_elements_ordered"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the average absolute difference between each\n    element and a medianpoint:\n    MAD = average | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    median = median_of_data(numbers)\n    return sum(abs(x - median) for x in numbers) / len(numbers)\n\n\ndef median_of_data(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate the median.\n    >>> median_of_data([1.0, 2.0, 3.0, 4.0])\n    2.5\n    \"\"\"\n    numbers = sorted(numbers)\n    middle = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        median = (numbers[middle - 1] + numbers[middle]) / 2\n    else:\n        median = numbers[middle]\n    return median\n\n\ndef mode_of_data(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate the mode.\n    >>> mode_of_data([1.0, 2.0, 3.0,"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n\ndef main():\n    numbers = [1, 2, 3]\n    delimeter = 4\n    print(intersperse(numbers, delimeter))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # split the string by spaces\n    groups = paren_string.split()\n    # initialize an empty list to store the results\n    results = []\n    # loop through each group\n    for group in groups:\n        # initialize a variable to store the maximum level of nesting\n        max_nesting = 0\n        # loop through each character in the group\n        for char in group:\n            # if the character is an opening parenthesis, increment the nesting level\n            if char == '(':\n                max_nesting += 1\n            # if the character is a closing parenthesis, decrement the nesting level\n            elif char == ')':\n                max_nesting -= 1\n        # append the maximum nesting level to the results list\n        results.append(max_nesting)\n    return results\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\ndef sum_product_recursive(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_recursive([])\n    (0, 1)\n    >>> sum_product_recursive([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n    else:\n        sum, product = sum_product_recursive(numbers[1:])\n        return sum + numbers[0], product * numbers[0]\n\n\ndef sum_product_iterative(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product_iterative([])\n    (0, 1)\n    >>> sum_product_iterative([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_value = None\n    for i in range(len(numbers)):\n        current_value = numbers[i]\n        if max_value is None or current_value > max_value:\n            max_value = current_value\n        result.append(max_value)\n    return result\n\n\ndef get_max_sum_subarray(numbers: List[int]) -> Tuple[int, List[int]]:\n    \"\"\" Find the maximum sum subarray in a given list of integers.\n    >>> get_max_sum_subarray([-2, -3, 4, -1, -2, 1, 5, -3])\n    (7, [4, -1, -2, 1, 5])\n    \"\"\"\n    max_sum = 0\n    max_subarray = []\n    current_sum = 0\n    for i in range(len(numbers)):\n        current_sum += numbers[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_subarray = numbers[i - 2: i + 1]\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum, max_subarray\n\n\ndef get_max_sum_subarray_recursive(numbers: List[int]) -> Tuple[int, List[int]]:\n    \"\"\" Find the maximum sum subarray in a given list of integers.\n    >>> get_max_sum_subarray_recursive([-2, -3, 4, -1, -2, 1, 5, -3])\n    (7, [4, -1, -2, 1, 5])\n    \"\"\"\n    if"}
{"task_id": "HumanEval/10", "completion": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    # find the longest postfix of supplied string that is a palindrome\n    palindromic_suffix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n    # append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string[:-len(palindromic_suffix)] + palindromic_suffix[::-1]\n\n\ndef test_make_palindrome():\n    assert make_palindrome('') == ''\n    assert make_palindrome('cat') == 'catac'\n    assert make_palindrome('cata') == 'catac'\n    assert make_palindrome('catac') == 'catac'\n    assert make_palindrome('cataca') == 'catacaca'\n    assert make_palindrome('catacaca') == 'catacaca'\n    assert make_palindrome('catacacac') == 'catacacac'\n    assert make_palindrome('catacacacabra') == 'catacacacabracatac'\n    assert make_palindrome('catacacacabracatac') == 'cata"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n\ndef get_key_from_file(filename: str) -> str:\n    \"\"\" Open file with name filename and return key as string.\n    >>> get_key_from_file('6.txt')\n    '123456'\n    \"\"\"\n    with open(filename) as f:\n        return f.read().strip()\n\n\ndef get_inputs_from_file(filename: str) -> List[str]:\n    \"\"\" Open file with name filename and return list of inputs.\n    >>> get_inputs_from_file('7.txt')\n    ['010', '110', '001', '101', '011', '111']\n    \"\"\"\n    with open(filename) as f:\n        return [line.strip() for line in f]\n\n\ndef get_single_input_from_file(filename: str) -> str:\n    \"\"\" Open file with name filename and return single input.\n    >>> get_single_input_from_file('8.txt')\n    '1101100011'\n    \"\"\"\n    with open(filename) as f:\n        return f.read().strip()\n\n\ndef get_inputs_from_url(url: str) -> List[str]:\n    \"\"\" Open url and return list of inputs.\n    >>> get_inputs_from_url('https://projecteuler.net/project/resources/p077_key.txt')\n    ['010', '110', '001', '101', '011', '111']\n    \"\"\"\n    with urllib.request.urlopen(url"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    return None\n"}
{"task_id": "HumanEval/13", "completion": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return least common multiple of two integers a and b\n    >>> lcm(3, 5)\n    15\n    >>> lcm(25, 15)\n    30\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\ndef gcd_list(my_list: list) -> int:\n    \"\"\" Return greatest common divisor of list of integers\n    >>> gcd_list([3, 5, 7, 11])\n    1\n    >>> gcd_list([25, 15, 30])\n    5\n    \"\"\"\n    return functools.reduce(greatest_common_divisor, my_list)\n\n\ndef lcm_list(my_list: list) -> int:\n    \"\"\" Return least common multiple of list of integers\n    >>> lcm_list([3, 5, 7, 11])\n    15\n    >>> lcm_list([25, 15, 30])\n    30\n    \"\"\"\n    return functools.reduce(lcm, my_list)\n\n\ndef gcd_range(start: int, end: int) -> int:\n    \"\"\" Return greatest common divisor of range of integers\n    >>> gcd_range(1, 10)\n    1\n    >>> gcd_range(100, 1000)\n    2\n    \"\"\"\n    return gcd_list(range(start, end + 1))\n\n\ndef lcm_range(start: int, end: int) -> int:\n    \"\"\" Return least common multiple of range of integers\n    >>> lcm_range("}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "HumanEval/15", "completion": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(map(str, range(n + 1)))\n\n\ndef get_input_sequence(n: int) -> List[int]:\n    \"\"\" Return a list of integers read from standard input, up to n elements.\n    >>> get_input_sequence(0)\n    []\n    >>> get_input_sequence(1)\n    [1]\n    >>> get_input_sequence(2)\n    [1, 2]\n    >>> get_input_sequence(3)\n    [1, 2, 3]\n    >>> get_input_sequence(4)\n    [1, 2, 3, 4]\n    >>> get_input_sequence(5)\n    [1, 2, 3, 4, 5]\n    >>> get_input_sequence(6)\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    return [int(x) for x in input().split()][:n]\n\n\ndef get_input_sequence_with_n(n: int) -> Tuple[int, List[int]]:\n    \"\"\" Return a tuple (n, sequence) where n is the number of elements read from standard input, and sequence is a list of integers read from standard input, up to n elements.\n    >>> get_input_sequence_with_n(0)\n    (0, [])\n    >>> get_input_sequence_with_n(1)\n    (1, [1])\n    >>> get_input_sequence_with_n(2)\n    (2, [1, 2])\n    >>> get_input_sequence_with_n(3)\n    (3, [1, 2, 3])\n    >>> get_input_sequence_with_n(4)\n    (4, [1, 2, 3, 4"}
{"task_id": "HumanEval/16", "completion": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_words(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct words (separated by space) does it consist of\n    >>> count_distinct_words('Hello World')\n    2\n    >>> count_distinct_words('Hello World Hello World')\n    2\n    \"\"\"\n    return len(set(string.split()))\n\n\ndef count_distinct_pairs(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct pairs (separated by space) does it consist of\n    >>> count_distinct_pairs('Hello World')\n    2\n    >>> count_distinct_pairs('Hello World Hello World')\n    4\n    \"\"\"\n    pairs = []\n    for i in range(len(string) - 1):\n        pairs.append(string[i] + ' ' + string[i + 1])\n    return len(set(pairs))\n\n\ndef count_distinct_triplets(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct triplets (separated by space) does it consist of\n    >>> count_distinct_triplets('Hello World')\n    1\n    >>> count_distinct_triplets('Hello World Hello World')\n    2\n    \"\"\"\n    triplets = []\n    for i in range(len(string) - 2):\n        triplets.append(string[i] + ' ' + string[i + 1] + ' ' + string[i + 2])\n    return len(set(triplets))\n\n\ndef count_distinct_quadruplets(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct quadruplets (separated by space) does it consist of"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/18", "completion": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n\n\ndef find_all_indexes(string: str, substring: str) -> list:\n    \"\"\" Find all indexes where the substring can be found in the original string.\n    >>> find_all_indexes('', 'a')\n    []\n    >>> find_all_indexes('aaa', 'a')\n    [0, 1, 2]\n    >>> find_all_indexes('aaaa', 'aa')\n    [0, 1, 2, 3]\n    \"\"\"\n    return [i for i in range(len(string)) if string.startswith(substring, i)]\n\n\ndef find_all_indexes_overlapping(string: str, substring: str) -> list:\n    \"\"\" Find all indexes where the substring can be found in the original string, overlapping.\n    >>> find_all_indexes_overlapping('', 'a')\n    []\n    >>> find_all_indexes_overlapping('aaa', 'a')\n    [0, 1, 2]\n    >>> find_all_indexes_overlapping('aaaa', 'aa')\n    [0, 1, 2, 3]\n    \"\"\"\n    return [i for i in range(len(string)) if string.startswith(substring, i, len(substring))]\n\n\ndef find_all_indexes_non_overlapping(string: str, substring: str) -> list:\n    \"\"\" Find all indexes where the substring can be found in the original string, non-overlapping.\n    >>> find_all_indexes_non_overlapping('', 'a')\n    []\n    >>> find_all_indexes_non_overlapping('aaa', 'a')\n    [0, "}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # split the input string into a list of numberals\n    number_list = numbers.split()\n    # sort the list of numberals\n    sorted_list = sorted(number_list)\n    # join the sorted list of numberals back into a string\n    sorted_string = ' '.join(sorted_list)\n    return sorted_string\n\n\ndef sort_numbers_list(numbers: List[str]) -> List[str]:\n    \"\"\" Input is a list of space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the list of strings with numbers sorted from smallest to largest\n    >>> sort_numbers_list(['three', 'one', 'five'])\n    ['one', 'three', 'five']\n    \"\"\"\n    # sort the list of numberals\n    sorted_list = sorted(numbers)\n    return sorted_list\n\n\ndef sort_numbers_set(numbers: set) -> set:\n    \"\"\" Input is a set of space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the set of strings with numbers sorted from smallest to largest\n    >>> sort_numbers_set({'three', 'one', 'five'})\n    {'one', 'three', 'five'}\n    \"\"\"\n    # sort the set of numberals\n    sorted_set = sorted(numbers)\n    return sorted_set\n\n\ndef sort_numbers_"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # sort the list of numbers\n    numbers.sort()\n    # find the index of the smallest difference between consecutive numbers\n    index = 1\n    while index < len(numbers) - 1 and numbers[index] - numbers[index - 1] == numbers[index + 1] - numbers[index]:\n        index += 1\n    # return the two numbers that are closest to each other\n    return numbers[index - 1], numbers[index]\n\n\ndef find_closest_elements_test_case_1():\n    numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    expected = (2.0, 2.2)\n    actual = find_closest_elements(numbers)\n    assert expected == actual, 'find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) returned ' + str(actual) + ' expected ' + str(expected)\n\n\ndef find_closest_elements_test_case_2():\n    numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n    expected = (2.0, 2.0)\n    actual = find_closest_elements(numbers)\n    assert expected == actual, 'find_closest"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    return [ (x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers ]\n\n\ndef rescale_to_unit_inplace(numbers: List[float]) -> None:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit_inplace([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_val) / (max_val - min_val)\n\n\ndef rescale_to_unit_inplace_safe(numbers: List[float]) -> None:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit_inplace_safe([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string )\n\n\ndef strlen_recursive(string: str ) -> int:\n    \"\"\" Return length of given string using recursion\n    >>> strlen_recursive('')\n    0\n    >>> strlen_recursive('abc')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    else:\n        return 1 + strlen_recursive(string[1:])\n\n\ndef strlen_iterative(string: str ) -> int:\n    \"\"\" Return length of given string using iteration\n    >>> strlen_iterative('')\n    0\n    >>> strlen_iterative('abc')\n    3\n    \"\"\"\n    length = 0\n    for _ in string:\n        length += 1\n    return length\n\n\ndef strlen_list_comprehension(string: str ) -> int:\n    \"\"\" Return length of given string using list comprehension\n    >>> strlen_list_comprehension('')\n    0\n    >>> strlen_list_comprehension('abc')\n    3\n    \"\"\"\n    return len( [ _ for _ in string ] )\n\n\ndef strlen_reduce(string: str ) -> int:\n    \"\"\" Return length of given string using reduce\n    >>> strlen_reduce('')\n    0\n    >>> strlen_reduce('abc')\n    3\n    \"\"\"\n    return reduce( lambda x, y: x + 1, string, 0 )\n\n\ndef strlen_map_filter(string: str ) -> int:\n    \"\"\" Return length of given string using map and filter\n    >>> strlen_map_filter('')\n    0\n    >>> strlen_map_filter('abc')\n    3\n    \"\"\"\n    return len( list( filter( lambda x: x, map( lambda x: x != '', string ) ) ) )\n\n\ndef strlen_sum(string: str ) -> int:\n    \"\"\" Return length of given string using sum\n    >>> strlen_sum('')\n    0\n    >>>"}
{"task_id": "HumanEval/24", "completion": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n\n\ndef prime_factors(n: int) -> list:\n    \"\"\" For a given number n, find all prime factors of n\n    >>> prime_factors(15)\n    [3, 5]\n    \"\"\"\n    factors = []\n    while n > 1:\n        divisor = largest_divisor(n)\n        factors.append(divisor)\n        n //= divisor\n    return factors\n\n\ndef prime_factors_list(n: int) -> list:\n    \"\"\" For a given number n, find all prime factors of n, sorted in ascending order\n    >>> prime_factors_list(15)\n    [3, 5]\n    \"\"\"\n    return sorted(prime_factors(n))\n\n\ndef prime_factors_set(n: int) -> set:\n    \"\"\" For a given number n, find all prime factors of n, sorted in ascending order\n    >>> prime_factors_set(15)\n    {3, 5}\n    \"\"\"\n    return set(prime_factors(n))\n\n\ndef prime_factors_dict(n: int) -> dict:\n    \"\"\" For a given number n, find all prime factors of n, sorted in ascending order\n    >>> prime_factors_dict(15)\n    {3: 1, 5: 1}\n    \"\"\"\n    factors = {}\n    for factor in prime_factors(n):\n        factors[factor] = factors.get(factor, 0) + 1\n    return factors\n\n\ndef prime_factors_multiset(n: int) -> list:\n    \"\"\" For a given number n, find all prime factors of n, sorted in ascending order\n    >>> prime_factors_multiset(15)\n"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    while n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                break\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\n\ndef test_factorize():\n    assert factorize(8) == [2, 2, 2]\n    assert factorize(25) == [5, 5]\n    assert factorize(70) == [2, 5, 7]\n\n\nif __name__ == '__main__':\n    test_factorize()\n"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(dict.fromkeys(numbers))\n"}
{"task_id": "HumanEval/27", "completion": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n\ndef get_first_letter_uppercase(string: str) -> str:\n    \"\"\" For a given string, return a new string with the first letter uppercase.\n    >>> get_first_letter_uppercase('hello')\n    'Hello'\n    \"\"\" package_name\n    \"\"\"\n    return string.capitalize()\n\n\ndef get_package_name(string: str) -> str:\n    \"\"\" For a given string, return a new string with the first letter uppercase and the rest lowercase.\n    >>> get_package_name('hello')\n    'Hello'\n    \"\"\"\n    return get_first_letter_uppercase(string.lower())\n\n\ndef get_package_name_from_file_name(string: str) -> str:\n    \"\"\" For a given string, return a new string with the first letter uppercase and the rest lowercase.\n    >>> get_package_name_from_file_name('hello')\n    'Hello'\n    \"\"\"\n    return get_package_name(string.replace('_', ' '))\n\n\ndef get_package_name_from_module_name(string: str) -> str:\n    \"\"\" For a given string, return a new string with the first letter uppercase and the rest lowercase.\n    >>> get_package_name_from_module_name('hello')\n    'Hello'\n    \"\"\"\n    return get_package_name(string.replace('.', ' '))\n\n\ndef get_package_name_from_class_name(string: str) -> str:\n    \"\"\" For a given string, return a new string with the first letter uppercase and the rest lowercase.\n    >>> get_package_name_from_class_name('hello')\n    'Hello'\n    \"\"\"\n    return get_package_name(string.replace('_', ' '))\n\n\ndef get_package_name_from_method_name(string: str) ->"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, -4, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_zero(l: list):\n    \"\"\"Return only zero numbers in the list.\n    >>> get_zero([-1, 2, -4, 5, 6])\n    []\n    >>> get_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [0]\n    \"\"\"\n    return [x for x in l if x == 0]\n\n\ndef get_odd(l: list):\n    \"\"\"Return only odd numbers in the list.\n    >>> get_odd([-1, 2, -4, 5, 6])\n    [5]\n    >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [3, 9, 1, -10]\n    \"\"\"\n    return [x for x in l if x % "}
{"task_id": "HumanEval/31", "completion": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_sieve(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime_sieve(6)\n    False\n    >>> is_prime_sieve(101)\n    True\n    >>> is_prime_sieve(11)\n    True\n    >>> is_prime_sieve(13441)\n    True\n    >>> is_prime_sieve(61)\n    True\n    >>> is_prime_sieve(4)\n    False\n    >>> is_prime_sieve(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    sieve = [True] * (n + 1)\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i * i, n + 1, i):\n                sieve[j] = False\n    return sieve[n]\n\n\ndef is_prime_miller_rabin(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime_miller_rabin(6)\n    False\n    >>> is_prime_miller_rabin(101)\n    True\n    >>> is_prime_miller_rabin(11)\n    True\n    >>> is_prime_miller_rabin"}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 == 1:\n        raise ValueError('xs must have even number of coefficients')\n    if xs[-1] == 0:\n        raise ValueError('xs[-1] must be non zero')\n    return -xs[-2] / xs[-1]\n"}
{"task_id": "HumanEval/33", "completion": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_sorted = sorted(l)\n    l_sorted_third = []\n    for i in range(0, len(l), 3):\n        l_sorted_third.append(l_sorted[i])\n    for i in range(1, len(l), 3):\n        l_sorted_third.append(l_sorted[i])\n    for i in range(2, len(l), 3):\n        l_sorted_third.append(l_sorted[i])\n    return l_sorted_third\n\n\ndef sort_third_alt(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third_alt([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third_alt([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_sorted = sorted(l)\n    l_sorted_third = []\n    for i in range(0, len(l), 3):\n        l_sorted_third.append(l_sorted[i])\n    for i in range(1, len(l),"}
{"task_id": "HumanEval/34", "completion": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\ndef get_unique_elements(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> get_unique_elements([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\ndef get_unique_elements_sorted(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> get_unique_elements_sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\ndef get_unique_elements_sorted_reverse(l: list):\n    \"\"\"Return sorted unique elements in a list in reverse order\n    >>> get_unique_elements_sorted_reverse([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [123, 9, 5, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(set(l), reverse=True)\n\n\ndef get_unique_elements_sorted_reverse_presorted(l: list):\n    \"\"\"Return sorted unique elements in a list in reverse order\n    >>> get_unique_elements_sorted_reverse_presorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [123, 9, 5, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(set(l), reverse="}
{"task_id": "HumanEval/35", "completion": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n\n\ndef sum_elements(l: list):\n    \"\"\"Return sum of elements in the list.\n    >>> sum_elements([1, 2, 3])\n    6\n    >>> sum_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    124\n    \"\"\"\n    return sum(l)\n\n\ndef average_elements(l: list):\n    \"\"\"Return average of elements in the list.\n    >>> average_elements([1, 2, 3])\n    2.0\n    >>> average_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    10.833333333333333\n    \"\"\"\n    return sum_elements(l) / len(l)\n\n\ndef median_elements(l: list):\n    \"\"\"Return median of elements in the list.\n    >>> median_elements([1, 2, 3])\n    2\n    >>> median_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3\n    \"\"\"\n    l = sorted(l)"}
{"task_id": "HumanEval/36", "completion": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if 7 in str(i):\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/37", "completion": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_sorted = sorted(l)\n    l_sorted_even = [l_sorted[i] for i in range(0, len(l_sorted), 2)]\n    l_sorted_odd = [l_sorted[i] for i in range(1, len(l_sorted), 2)]\n    return l_sorted_even + l_sorted_odd\n\n\ndef sort_even_inplace(l: list):\n    \"\"\"This function sorts the list l in place, using the sort_even function.\n    >>> l = [5, 6, 3, 4]\n    >>> sort_even_inplace(l)\n    >>> l\n    [3, 6, 5, 4]\n    \"\"\"\n    l[:] = sort_even(l)\n\n\ndef sort_even_recursive(l: list):\n    \"\"\"This function sorts the list l in place, using the sort_even function.\n    >>> l = [5, 6, 3, 4]\n    >>> sort_even_recursive(l)\n    >>> l\n    [3, 6, 5, 4]\n    \"\"\"\n    if len(l) <= 1:\n        return l\n    else:\n        l_sorted = sort_even_recursive(l[:-1])\n        l_sorted.append(l[-1])\n        return l_sorted\n\n\ndef sort_even_recursive_inplace(l: list):\n    \"\"\"This function sorts the list l in place, using the sort_even function.\n    >>> l = [5, 6, 3, 4]\n    >>> sort_even"}
{"task_id": "HumanEval/38", "completion": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef encode_caesar(s: str, k: int):\n    \"\"\"\n    takes as input string s and integer k. Returns encoded string.\n    \"\"\"\n    return \"\".join(chr((ord(c) + k) % 256) for c in s)\n\n\ndef decode_caesar(s: str, k: int):\n    \"\"\"\n    takes as input string s and integer k. Returns decoded string.\n    \"\"\"\n    return \"\".join(chr((ord(c) - k) % 256) for c in s)\n\n\ndef encode_vigenere(s: str, k: str):\n    \"\"\"\n    takes as input string s and key k. Returns encoded string.\n    \"\"\"\n    return encode_caesar(s, len(k))\n\n\ndef decode_vigenere(s: str, k: str):\n    \"\"\"\n    takes as input string s and key k. Returns decoded"}
{"task_id": "HumanEval/39", "completion": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    return fibonacci_prime(n)\n\n\ndef fibonacci_prime(n: int):\n    \"\"\"\n    fibonacci_prime returns n-th number that is a prime number and it's also a Fibonacci number.\n    >>> fibonacci_prime(1)\n    2\n    >>> fibonacci_prime(2)\n    3\n    >>> fibonacci_prime(3)\n    5\n    >>> fibonacci_prime(4)\n    13\n    >>> fibonacci_prime(5)\n    89\n    \"\"\"\n    return prime_fibonacci(n)\n\n\ndef prime_fibonacci(n: int):\n    \"\"\"\n    prime_fibonacci returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fibonacci(1)\n    2\n    >>> prime_fibonacci(2)\n    3\n    >>> prime_fibonacci(3)\n    5\n    >>> prime_fibonacci(4)\n    13\n    >>> prime_fibonacci(5)\n    89\n    \"\"\"\n    return fibonacci_prime(n)\n\n\ndef prime_fibonacci_sequence(n: int):\n    \"\"\"\n    prime_fibonacci_sequence returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fibonacci_sequence(1)\n    2\n    >>> prime_fibonacci_sequence(2)\n    3\n    >>> prime_fibonacci_sequence(3)\n    5\n    >>> prime_fibonacci_sequence(4)\n    1"}
{"task_id": "HumanEval/40", "completion": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # your code here\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * (n - 1) // 2\n\n\ndef main():\n    n = int(input())\n    print(car_race_collision(n))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/42", "completion": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n\ndef test_incr_list():\n    assert incr_list([1, 2, 3]) == [2, 3, 4]\n    assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [\n        6,\n        4,\n        6,\n        3,\n        4,\n        4,\n        10,\n        1,\n        124,\n    ]\n\n\ndef incr_dict(d: dict):\n    \"\"\"Return dictionary with values incremented by 1.\n    >>> incr_dict({'a': 1, 'b': 2, 'c': 3})\n    {'a': 2, 'b': 3, 'c': 4}\n    >>> incr_dict({'a': 5, 'b': 3, 'c': 5, 'd': 2, 'e': 3, 'f': 9, 'g': 0, 'h': 123})\n    {'a': 6, 'b': 4, 'c': 6, 'd': 3, 'e': 4, 'f': 10, 'g': 1, 'h': 124}\n    \"\"\"\n    return {k: v + 1 for k, v in d.items()}\n\n\ndef test_incr_dict():\n    assert incr_dict({'a': 1, 'b': 2, 'c': 3}) == {'a': 2, 'b': 3, 'c"}
{"task_id": "HumanEval/43", "completion": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # YOUR CODE HERE\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\ndef find_pairs_sum_to_zero(l):\n    \"\"\"\n    find_pairs_sum_to_zero takes a list of integers as an input.\n    it returns a list of pairs of elements in the list that sum to zero.\n    >>> find_pairs_sum_to_zero([1, 3, 5, 0])\n    [(0, 1)]\n    >>> find_pairs_sum_to_zero([1, 3, -2, 1])\n    [(1, -2)]\n    >>> find_pairs_sum_to_zero([1, 2, 3, 7])\n    []\n    >>> find_pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    [(3, 5)]\n    >>> find_pairs_sum_to_zero([1])\n    []\n    \"\"\"\n    # YOUR CODE HERE\n    pairs = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] =="}
{"task_id": "HumanEval/44", "completion": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    # convert x to base 10\n    x = int(x, base)\n    # convert x to base base\n    return str(x, base)\n\n\ndef change_base_test():\n    \"\"\"Test change_base function.\n    \"\"\"\n    print(change_base(8, 3))\n    print(change_base(8, 2))\n    print(change_base(7, 2))\n\n\ndef main():\n    \"\"\"Call change_base function.\n    \"\"\"\n    change_base_test()\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/45", "completion": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2\n\n\ndef triangle_area_from_input(prompt):\n    \"\"\"Given prompt return area for a triangle.\n    >>> triangle_area_from_input('Enter length of side and high for a triangle: ')\n    7.5\n    \"\"\" # TODO: implement\n    return None\n\n\ndef main():\n    \"\"\"Prompt user for length of side and high for a triangle.\n    Return area for a triangle.\n    \"\"\"\n    prompt = 'Enter length of side and high for a triangle: '\n    length_side = int(input(prompt))\n    high = int(input(prompt))\n    return triangle_area(length_side, high)\n\n\nif __name__ == '__main__':\n    print(main())\n"}
{"task_id": "HumanEval/46", "completion": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    pass\n\n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(4) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    4\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    14\n    \"\"\"\n    pass\n\n\ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 2\n    fib6(3) -> 0\n    fib6(4) -> 0\n    fib6(5) -> 0\n    fib6(n) -> fib6(n-1) + fib6(n-"}
{"task_id": "HumanEval/47", "completion": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n\ndef median_sorted_list(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_sorted_list([3, 1, 2, 4, 5])\n    3\n    >>> median_sorted_list([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n\ndef median_unsorted_list(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_unsorted_list([3, 1, 2, 4, 5])\n    3\n    >>> median_unsorted_list([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return median_sorted_list(l)\n\n\ndef median_array(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_array([3, 1, 2, 4, 5])\n    3\n    >>> median_array([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l"}
{"task_id": "HumanEval/48", "completion": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_prime(n: int):\n    \"\"\"\n    Checks if given number is prime\n    >>> is_prime(0)\n    False\n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(3)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(5)\n    True\n    >>> is_prime(6)\n    False\n    >>> is_prime(7)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(9)\n    False\n    >>> is_prime(10)\n    False\n    >>> is_prime(11)\n    True\n    >>> is_prime(12)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(14)\n    False\n    >>> is_prime(15)\n    False\n    >>> is_prime(16)\n    False\n    >>> is_prime(17)\n    True\n    >>> is_prime(18)\n    False\n    >>> is_prime(19)\n    True\n    >>> is_prime(20)\n    False\n    >>> is_prime(21)\n    True\n    >>> is_prime(22)\n    False\n    >>> is_prime(23)\n    True\n    >>> is_prime(24)\n    False\n    >>> is_prime(25)\n    False\n    >>> is_prime(26)\n    False\n    >>> is_prime(27)\n    True\n    >>> is_prime(28)\n    False\n    >>> is_prime(29)\n    True\n    >>> is_prime"}
{"task_id": "HumanEval/49", "completion": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n\n\ndef modp_inv(a: int, p: int):\n    \"\"\"Return a^-1 modulo p (be aware of numerics).\n    >>> modp_inv(3, 5)\n    2\n    >>> modp_inv(1101, 101)\n    100\n    >>> modp_inv(0, 101)\n    1\n    >>> modp_inv(3, 11)\n    8\n    >>> modp_inv(100, 101)\n    1\n    \"\"\"\n    return pow(a, p - 2, p)\n\n\ndef modp_sqrt(a: int, p: int):\n    \"\"\"Return a^((p-1)/2) modulo p (be aware of numerics).\n    >>> modp_sqrt(3, 5)\n    2\n    >>> modp_sqrt(1101, 101)\n    100\n    >>> modp_sqrt(0, 101)\n    1\n    >>> modp_sqrt(3, 11)\n    8\n    >>> modp_sqrt(100, 101)\n    1\n    \"\"\"\n    return pow(a, (p - 1) // 2, p)\n\n\ndef modp_exp(a: int, n: int, p: int):\n    \"\"\"Return a^n modulo p (be aware of numerics).\n    >>> modp_exp(3, 5, 101)\n    100\n    >>> modp_exp(1101, 101, 1"}
{"task_id": "HumanEval/50", "completion": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + 26) % 26) + ord(\"a\")) for ch in s])\n\n\ndef main():\n    print(encode_shift(\"hello world\"))\n    print(decode_shift(\"uryyb jbeyq \"))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/51", "completion": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return re.sub(r'[aeiou]', '', text)\n\n\ndef remove_vowels_re(text):\n    \"\"\"\n    remove_vowels_re is a function that takes string and returns string without vowels.\n    >>> remove_vowels_re('')\n    ''\n    >>> remove_vowels_re(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels_re('abcdef')\n    'bcdf'\n    >>> remove_vowels_re('aaaaa')\n    ''\n    >>> remove_vowels_re('aaBAA')\n    'B'\n    >>> remove_vowels_re('zbcd')\n    'zbcd'\n    \"\"\"\n    return re.sub(r'[aeiou]', '', text)\n\n\ndef remove_vowels_re_compiled(text):\n    \"\"\"\n    remove_vowels_re_compiled is a function that takes string and returns string without vowels.\n    >>> remove_vowels_re_compiled('')\n    ''\n    >>> remove_vowels_re_compiled(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels_re_compiled('abcdef')\n    'bcdf'\n    >>> remove_vowels_re_compiled('aaaaa')\n    ''\n    >>> remove_vowels_re_"}
{"task_id": "HumanEval/52", "completion": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n\ndef get_numbers_below_threshold(numbers, threshold):\n    return [x for x in numbers if x < threshold]\n\n\ndef get_numbers_above_threshold(numbers, threshold):\n    return [x for x in numbers if x > threshold]\n\n\ndef get_numbers_within_threshold(numbers, threshold):\n    return [x for x in numbers if threshold - 1 < x < threshold + 1]\n\n\ndef get_numbers_outside_threshold(numbers, threshold):\n    return [x for x in numbers if x not in get_numbers_within_threshold(numbers, threshold)]\n\n\ndef get_numbers_within_threshold_set(numbers, threshold):\n    return set(get_numbers_within_threshold(numbers, threshold))\n\n\ndef get_numbers_outside_threshold_set(numbers, threshold):\n    return set(get_numbers_outside_threshold(numbers, threshold))\n\n\ndef get_numbers_within_threshold_list(numbers, threshold):\n    return list(get_numbers_within_threshold_set(numbers, threshold))\n\n\ndef get_numbers_outside_threshold_list(numbers, threshold):\n    return list(get_numbers_outside_threshold_set(numbers, threshold))\n\n\ndef get_numbers_within_threshold_sorted(numbers, threshold):\n    return sorted(get_numbers_within_threshold(numbers, threshold))\n\n\ndef get_numbers_outside_threshold_sorted(numbers, threshold):\n    return sorted(get_numbers_outside_threshold(numbers, threshold))\n\n\ndef get_numbers_within_threshold_sorted_set(numbers, threshold"}
{"task_id": "HumanEval/53", "completion": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0\n    >>> divide(5, 2)\n    2\n    \"\"\"\n    if y == 0:\n        return 0\n    return x / y\n\n\ndef modulo(x: int, y: int):\n    \"\"\"Modulo two numbers x and y\n    >>> modulo(2, 3)\n    2\n    >>> modulo(5, 7)\n    5\n    >>> modulo(5, 2)\n    1\n    \"\"\"\n    return x % y\n\n\ndef power(x: int, y: int):\n    \"\"\"Power two numbers x and y\n    >>> power(2, 3)\n    8\n    >>> power(5, 7)\n    125\n    \"\"\"\n    return x ** y\n\n\ndef root(x: int, y: int):\n    \"\"\"Root two numbers x and y\n    >>> root(8, 3)\n    2\n    >>> root(125, 7)\n    5\n    >>> root(125, 2)\n    125\n    \"\"\"\n    return x ** (1 / y)\n\n\ndef factorial(x: int):\n    \"\"\"Factorial of a number x\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    \"\"\"\n    result = 1\n    for i in range(1, x + 1):\n        result *= i\n    return result\n\n\ndef"}
{"task_id": "HumanEval/54", "completion": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return sorted(s0) == sorted(s1)\n\n\ndef main():\n    import argparse\n    parser = argparse.ArgumentParser()\n    parser.add_argument('file', type=argparse.FileType('r'))\n    args = parser.parse_args()\n    for line in args.file:\n        words = line.split()\n        if len(words) < 2:\n            continue\n        if same_chars(words[0], words[1]):\n            print(line.rstrip())\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/55", "completion": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "HumanEval/56", "completion": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n\ndef get_closing_bracket(bracket: str):\n    \"\"\" bracket is a string of length 1.\n    return the string '>' concatenated to bracket.\n\n    >>> get_closing_bracket('<')\n    '>'\n    >>> get_closing_bracket('>')\n    '>>'\n    \"\"\"\n    return '>' + bracket\n\n\ndef get_closing_brackets(brackets: str):\n    \"\"\" brackets is a string of '<' and '>'.\n    return the string of closing brackets.\n\n    >>> get_closing_brackets('<>')\n    '>>'\n    >>> get_closing_brackets('<<><>>')\n    '>>>>'\n    >>> get_closing_brackets('><<>')\n    '>>'\n    \"\"\"\n    closing_brackets = ''\n    for bracket in brackets:\n        closing_brackets += get_closing_bracket(bracket)\n    return closing_brackets\n\n\ndef get_closing_bracketing(brackets: str):\n    \"\"\" brackets is a string of '<' and '>'.\n    return the string of closing brackets.\n\n    >>> get_closing_bracketing('<>')\n    '>>'\n    >>> get_closing_bracketing('<<><>>')\n    '>>>>'\n    >>> get_closing_bracketing('><<>')\n    '>>'\n    \"\"\"\n    return get_closing_bra"}
{"task_id": "HumanEval/57", "completion": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n\n\ndef is_sorted(l: list):\n    \"\"\"Return True is list elements are sorted in ascending order.\n    >>> is_sorted([1, 2, 3, 4])\n    True\n    >>> is_sorted([4, 3, 2, 1])\n    False\n    >>> is_sorted([1, 2, 2, 3, 4])\n    True\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    False\n    \"\"\"\n    return sorted(l) == l\n\n\ndef is_sorted_monotonic(l: list):\n    \"\"\"Return True is list elements are sorted in ascending order or\n    monotonically increasing or decreasing.\n    >>> is_sorted_monotonic([1, 2, 3, 4])\n    True\n    >>> is_sorted_monotonic([4, 3, 2, 1])\n    True\n    >>> is_sorted_monotonic([1, 2, 2, 3, 4])\n    True\n    >>> is_sorted_monotonic([1, 2, 2, 2, 3, 4])\n    True\n    >>> is_sorted_monotonic([1, 2, 4, 20])\n    True\n    >>> is_sorted_monotonic([1, 20, 4, 10])\n    True\n    >>> is_sorted_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return is_sorted(l) or monotonic(l)\n\n\ndef is_sorted"}
{"task_id": "HumanEval/58", "completion": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(l2))\n\n\ndef main():\n    import argparse\n    parser = argparse.ArgumentParser(description='''\n        Return sorted unique common elements for two lists.\n        ''')\n    parser.add_argument('l1', nargs='+', type=int, help='first list')\n    parser.add_argument('l2', nargs='+', type=int, help='second list')\n    args = parser.parse_args()\n    print(common(args.l1, args.l2))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/59", "completion": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Factor n into primes using the Sieve of Eratosthenes\n    primes = [2]\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n        else:\n            i += 2\n    return primes[-1]\n\n\ndef largest_prime_factor_naive(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_naive(13195)\n    29\n    >>> largest_prime_factor_naive(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n            return largest_prime_factor_naive(n)\n        i += 1\n    return n\n\n\ndef main():\n    import timeit\n    print(timeit.timeit('largest_prime_factor(13195)', setup='from __main__ import largest_prime_factor', number=100000))\n    print(timeit.timeit('largest_prime_factor_naive(13195)', setup='from __main__ import largest_prime_factor_naive', number=100000))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/60", "completion": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1 ))\n\n\ndef sum_to_n_recursive(n: int):\n    \"\"\"sum_to_n_recursive is a function that sums numbers from 1 to n.\n    >>> sum_to_n_recursive(30)\n    465\n    >>> sum_to_n_recursive(100)\n    5050\n    >>> sum_to_n_recursive(5)\n    15\n    >>> sum_to_n_recursive(10)\n    55\n    >>> sum_to_n_recursive(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n_recursive(n - 1)\n\n\ndef sum_to_n_iterative(n: int):\n    \"\"\"sum_to_n_iterative is a function that sums numbers from 1 to n.\n    >>> sum_to_n_iterative(30)\n    465\n    >>> sum_to_n_iterative(100)\n    5050\n    >>> sum_to_n_iterative(5)\n    15\n    >>> sum_to_n_iterative(10)\n    55\n    >>> sum_to_n_iterative(1)\n    1\n    \"\"\"\n    result = 0\n    for i in range(1, n + 1 ):\n        result += i\n    return result\n\n\ndef sum_to_n_memoized(n: int):\n    \"\"\"sum_to_n_memoized is a function that"}
{"task_id": "HumanEval/61", "completion": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\ndef get_next_token(s: str, position: int):\n    \"\"\" return the token at position position in the string s.\n    tokens are separated by whitespace.\n    return None if there is no token at position position.\n\n    >>> get_next_token(\"a b c \", 0)\n    'a'\n    >>> get_next_token(\"a b c \", 1)\n    'b'\n    >>> get_next_token(\"a b c \", 2)\n    'c'\n    >>> get_next_token(\"a b c \", 3)\n    None\n    \"\"\"\n    start = position\n    while start < len(s) and s[start] != ' ':\n        start += 1\n    end = start\n    while end < len(s) and s[end] != ' ':\n        end += 1\n    if start == end:\n        return None\n    else:\n        return s[start:end]\n\n\ndef get_next_token_skip_whitespace(s: str, position: int):\n    \"\"\" return the token at position position in the string s, skipping whitespace.\n    tokens are separated by whitespace.\n    return None if there is no token at position position.\n\n    >>> get_next_token_skip_whitespace(\"a b c \", 0)\n    'a'\n    >>> get_next_token_skip_whitespace(\"a b c \", 1)\n    'b'"}
{"task_id": "HumanEval/62", "completion": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * y for x, y in zip(xs[1:], range(1, len(xs)))][::-1]\n\n\ndef main():\n    n = int(input())\n    xs = list(map(int, input().split()))\n    print(derivative(xs))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/63", "completion": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    pass\n\n\ndef fibfib_naive(n: int):\n    \"\"\"The naive approach is to compute the sequence recursively, but this is very slow.\n    >>> fibfib_naive(1)\n    0\n    >>> fibfib_naive(5)\n    4\n    >>> fibfib_naive(8)\n    24\n    \"\"\"\n    pass\n\n\ndef fibfib_memoized(n: int):\n    \"\"\"A memoized approach is to compute the sequence recursively, but this is very slow.\n    >>> fibfib_memoized(1)\n    0\n    >>> fibfib_memoized(5)\n    4\n    >>> fibfib_memoized(8)\n    24\n    \"\"\"\n    pass\n\n\ndef fibfib_dynamic(n: int):\n    \"\"\"A dynamic programming approach is to compute the sequence recursively, but this is very slow.\n    >>> fibfib_dynamic(1)\n    0\n    >>> fibfib_dynamic(5)\n    4\n    >>> fibfib_dynamic(8)\n    24\n    \"\"\"\n    pass\n\n\ndef fibfib_closed_form(n: int):\n    \"\"\"A closed form approach is to compute the sequence recursively, but this is very slow.\n    >>> fibfib_closed_form(1)\n    0\n    >>> fibfib_closed_form(5)\n    4\n   "}
{"task_id": "HumanEval/64", "completion": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # YOUR CODE HERE\n    return len([c for c in s if c.lower() in 'aeiouy'])\n\ndef test_vowels_count(vowels_count_function):\n    \"\"\"Test function vowels_count.\n\n    Args:\n        vowels_count_function (function): function vowels_count defined\n            above\n    \"\"\"\n    assert vowels_count('abcde') == 2\n    assert vowels_count('ACEDY') == 3\n    assert vowels_count('a') == 1\n    assert vowels_count('abcd') == 2\n    assert vowels_count('abcdey') == 3\n    assert vowels_count('abcdiou ') == 4\n    assert vowels_count('abcdiouy') == 5\n    assert vowels_count('abcdiouyz') == 6\n\ndef main():\n    test_vowels_count(vowels_count)\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/65", "completion": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    return ''.join(reversed(str(x)[shift:]) + str(x)[:shift])\n\ndef main():\n    \"\"\"Prompt user for integer and shift amount, call function, print result. \"\"\"\n    x = int(input('Enter integer: '))\n    shift = int(input('Enter shift amount: '))\n    result = circular_shift(x, shift)\n    print(result)\n\nmain()\n\\end{code}\n\nComment: I'm not sure what you mean by \"circularly shift the digits of the integer\". Can you give an example?\n\nComment: @templatetypedef I've added an example.\n\nAnswer: \\begin{blockquote}\n\nI'm not sure what you mean by \"circularly shift the digits of the integer\". Can you give an example?\n\\end{blockquote}\n\nSure. Let's say we have the integer `1234567890`. If we shift the digits right by 2, we get `3456789012`. If we shift the digits right by 10, we get `0123456789`.\n\n\\begin{blockquote}\n\nI'm not sure what you mean by \"circularly shift the digits of the integer\". Can you give an example?\n\\end{blockquote}\n\nSure. Let's say we have the integer `1234567890`. If we shift the digits right by 2, we get `3456789012`. If we shift the digits right by 10, we get `0123456789`.\n\n\\begin{blockquote}\n\nI'm not sure what you mean by \"circularly shift the digits of the integer\". Can"}
{"task_id": "HumanEval/66", "completion": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters"}
{"task_id": "HumanEval/67", "completion": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[2])\n    total = apples + oranges\n    return n - total\n\ndef fruit_distribution(s,n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[2])\n    total = apples + oranges\n    return n - total\n\ndef fruit_distribution(s,n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[2])\n    total = apples + oranges\n    return n - total\n\ndef fruit_distribution(s,n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[2])\n    total = apples + oranges\n    return n - total\n\ndef fruit_distribution(s,n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[2])\n"}
{"task_id": "HumanEval/68", "completion": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # check if the array is empty\n    if not arr:\n        return []\n\n    # find the smallest even value\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even_value:\n            smallest_even_value = value\n            smallest_even_index = i\n\n    # return the smallest even value and its index\n    return [smallest_even_value, smallest_even_index]\n\n\n# test case 1:\nprint(pluck([4, 2, 3]))  # ["}
{"task_id": "HumanEval/69", "completion": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # write your code here\n    lst.sort()\n    for i in range(len(lst)-1, -1, -1):\n        if lst[i] > 1:\n            return lst[i]\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # YOUR CODE HERE\n    lst.sort()\n    return lst\n\n\ndef get_unique_elements(lst):\n    '''\n    Given list of integers, return list of unique elements.\n\n    Examples:\n    get_unique_elements([1, 2, 3, 2, 1]) == [1, 2, 3]\n    get_unique_elements([1, 1, 1, 1, 1]) == [1]\n    get_unique_elements([]) == []\n    '''\n    # YOUR CODE HERE\n    return list(set(lst))\n\n\ndef get_unique_elements_sorted(lst):\n    '''\n    Given list of integers, return list of unique elements sorted.\n\n    Examples:\n    get_unique_elements_sorted([1, 2, 3, 2, 1]) == [1, 2, 3]\n    get_unique_elements_sorted([1, 1, 1, 1, 1]) == [1]\n    get_unique_elements_sorted([]) == []\n    '''\n    # YOUR CODE HERE\n    return sorted(list(set(lst)))\n\n\ndef get_unique_elements_sorted_reverse(lst):\n    '''\n    Given list of integers, return list of unique elements sorted in reverse order.\n\n    Examples:\n    get_unique_elements_sorted_reverse([1, 2, 3, 2, 1]) == [3, 2, 1]\n    get_unique_elements_sorted_reverse([1,"}
{"task_id": "HumanEval/71", "completion": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Your code here\n    pass\n\ndef get_unique_elements(my_list):\n    '''\n    Given a list of elements return a list of unique elements in the list.\n    Example:\n    get_unique_elements([1, 2, 3, 3, 4, 5, 5, 5 ]) == [1, 2, 3, 4, 5]\n    ''' package\n    pass\n\ndef get_unique_elements_set(my_list):\n    '''\n    Given a list of elements return a list of unique elements in the list.\n    Example:\n    get_unique_elements([1, 2, 3, 3, 4, 5, 5, 5 ]) == [1, 2, 3, 4, 5]\n    '''\n    # Your code here\n    pass\n\ndef get_unique_elements_sorted(my_list):\n    '''\n    Given a list of elements return a list of unique elements in the list.\n    Example:\n    get_unique_elements([1, 2, 3, 3, 4, 5, 5, 5 ]) == [1, 2, 3, 4, 5]\n    '''\n    # Your code here\n    pass\n\ndef get_unique_elements_sorted_set(my_list):\n    '''\n    Given a list of elements return a list of unique elements in the list.\n    Example:\n    get_unique_elements([1, 2, 3, 3, 4, 5, 5, 5 ]) == [1, 2, 3"}
{"task_id": "HumanEval/72", "completion": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if len(q) == 0:\n        return False\n    if len(q) == 1:\n        return q[0] <= w\n    if q == sorted(q):\n        return sum(q) <= w\n    return False\n\n\ndef get_next_permutation(lst):\n    '''\n    Write a function that takes a list of integers and returns the next permutation of the list.\n\n    Example:\n    get_next_permutation([1, 2, 3]) \u279e [1, 3, 2]\n\n    get_next_permutation([1, 2, 3, 4]) \u279e [1, 3, 2, 4]\n\n    get_next_permutation([1, 2, 3, 4, 5]) \u279e [1, 2, 4, 3, 5]\n    '''\n    i = len(lst) - 2\n    while i >= 0 and lst[i] >= lst[i + 1"}
{"task_id": "HumanEval/73", "completion": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # TODO - implement function smallest_change\n    return 0\n\n\ndef main():\n    import sys\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(smallest_change(arr))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/74", "completion": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    lst1_len = sum(len(i) for i in lst1)\n    lst2_len = sum(len(i) for i in lst2)\n    if lst1_len == lst2_len:\n        return lst1\n    elif lst1_len < lst2_len:\n        return lst1\n    else:\n        return lst2\n\n\ndef get_unique_elements(my_list):\n    '''\n    Write a function that accepts a list of strings and returns a list of unique strings.\n\n    Examples\n    get_unique_elements([]) \u279e []\n    get_unique_elements(['apple', 'banana', 'orange', 'banana', 'apple']) \u279e ['apple', 'banana', 'orange']\n    get_unique_elements(['apple', 'banana', 'orange', 'banana', 'apple', 'apple']) \u279e ['apple', 'banana', 'orange']\n    '''\n    return list(set(my_list))\n\n\ndef get_unique_elements_sorted(my_list):\n    '''\n    Write a function that accepts a list of strings and returns a list of unique strings sorted in ascending order.\n\n    Examples\n    get_unique_elements"}
{"task_id": "HumanEval/75", "completion": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    pass\n\ndef is_prime(n):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    A prime number is a number that is divisible only by itself and 1.\n    Example:\n    is_prime(3) == True\n    is_prime(4) == False\n    \"\"\" -\n    pass\n\ndef is_prime_factors(n):\n    \"\"\"Write a function that returns true if the given number is the product of prime factors and false otherwise.\n    Example:\n    is_prime_factors(30) == True\n    30 = 2 * 3 * 5\n    is_prime_factors(12) == False\n    12 = 2 * 2 * 3\n    \"\"\"\n    pass\n\ndef is_perfect_square(n):\n    \"\"\"Write a function that returns true if the given number is the square of a perfect square and false otherwise.\n    Example:\n    is_perfect_square(9) == True\n    3^2 = 9\n    is_perfect_square(10) == False\n    \"\"\"\n    pass\n\ndef is_prime_power(n):\n    \"\"\"Write a function that returns true if the given number is a prime power and false otherwise.\n    A prime power is a number of the form p^k where p is a prime and k is a positive integer.\n    Example:\n    is_prime_power(3) == True\n    3 = 3^1\n    is_prime_power(4) == False\n    \"\"\"\n    pass\n\ndef is_prime_power_chain(n):\n    \"\"\"Write a function that returns true if the given number is a prime power chain and false otherwise.\n    A prime power chain is a number of the form p1^k1 * p2^k2 * ..."}
{"task_id": "HumanEval/76", "completion": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n ** int(x / n) == x\n\n\ndef is_simple_power_solution(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n ** int(x / n) == x\n\n\ndef is_simple_power_solution_2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return n"}
{"task_id": "HumanEval/77", "completion": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    # your code goes here\n    return a**(1/3) == int(a**(1/3))\n\n\ndef is_prime(n):\n    '''\n    Write a function that takes an integer n and returns True if n is prime, False otherwise.\n    Examples:\n    is_prime(1) ==> True\n    is_prime(2) ==> True\n    is_prime(3) ==> True\n    is_prime(4) ==> False\n    is_prime(5) ==> True\n    is_prime(6) ==> False\n    is_prime(7) ==> True\n    is_prime(8) ==> False\n    is_prime(9) ==> False\n    is_prime(10) ==> False\n    is_prime(11) ==> True\n    is_prime(12) ==> False\n    is_prime(13) ==> True\n    is_prime(14) ==> False\n    is_prime(15) ==> False\n    is_prime(16) ==> False\n    is_prime(17) ==> True\n    is_prime(18) ==> False\n    is_prime(19) ==> True\n    is_prime(20) ==> False\n    '''\n    # your code goes here\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_number(n):\n    '''\n    Write a function that takes an integer n and returns True if n is prime, False otherwise.\n    Examples:\n    is_prime_"}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # your code goes here\n    count = 0\n    for digit in num:\n        if digit in '2357ABED':\n            count += 1\n    return count\n\n\ndef get_prime_numbers(n):\n    \"\"\"You have been tasked to write a function that receives an integer \n    n and returns a list of prime numbers less than or equal to n.\n    Examples:\n    For n = 10, the output should be [2, 3, 5, 7]\n    For n = 100, the output should be [2, 3, 5, 7, 11, 13, 17, 19"}
{"task_id": "HumanEval/79", "completion": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # convert decimal to binary\n    binary = bin(decimal)[2:]\n\n    # add 'db' at beginning and end of binary string\n    binary = 'db' + binary + 'db'\n\n    return binary\n\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a string representing a binary number. Your task is to convert it to\n    decimal format.\n\n    Examples:\n    binary_to_decimal('db1111db')   # returns 15\n    binary_to_decimal('db100000db')   # returns 32\n    \"\"\"\n    # remove 'db' at beginning and end of binary string\n    binary = binary[2:-2]\n\n    # convert binary to decimal\n    decimal = int(binary, 2)\n\n    return decimal\n\n\ndef main():\n    # test decimal_to_binary function\n    print('Testing decimal_to_binary function:')\n    print('decimal_to_binary(15) = ', decimal_to_binary(15))\n    print('decimal_to_binary(32) = ', decimal_to_binary(32))\n\n    # test binary_to_decimal function\n    print('\\nTesting binary_to_decimal function:')\n    print('binary_to_decimal(\\'db1111db\\') = ', binary_to_decimal('db1111db'))\n    print('binary_to_decimal(\\'db"}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # Your code goes here\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    return [ 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E' ][ int( g / 0.1 ) ]\n\n\ndef get_grade_equation( gpa ):\n    return numerical_letter_grade( gpa )\n\n\ndef get_gpa_from_grade_equation( grade_equation ):\n    return float( grade_equation.split( '+' )[ 0 ] )\n\n\ndef get_gpa_from_grade( grade ):\n    return float( grade.split( '+' )[ 0 ] )\n\n\ndef get_grade_from_gpa( gpa ):\n    return numerical_letter_grade( gpa )\n\n\ndef get_grade_from_grade_equation( grade_equation ):\n    return numerical_"}
{"task_id": "HumanEval/82", "completion": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code goes here\n    return (len(string))\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code goes here\n    return (len(string))\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code goes here\n    return (len(string))\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code goes here\n    return (len(string))\n\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    # Your code goes here"}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n\n\ndef main():\n    n = int(input())\n    print(starts_one_ends(n))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/84", "completion": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(N)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    # code here\n    sum = 0\n    for i in range(0, len(lst), 2):\n        sum += lst[i]\n    return sum\n\n\ndef main():\n    lst = [4, 2, 6, 7]\n    print(add(lst))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(sorted(s.split()))\n\n\ndef get_unique_elements(my_list):\n    \"\"\"\n    Write a function that takes a list of strings and returns a list of unique elements in the list.\n    Note: order of elements in the list should be same as order of unique elements.\n\n    For example:\n    get_unique_elements(['a', 'b', 'c', 'a', 'b', 'c']) returns ['a', 'b', 'c']\n    get_unique_elements(['a', 'b', 'c', 'd']) returns ['a', 'b', 'c', 'd']\n    get_unique_elements([]) returns []\n    \"\"\"\n    return list(set(my_list))\n\n\ndef get_unique_elements_sorted(my_list):\n    \"\"\"\n    Write a function that takes a list of strings and returns a list of unique elements in the list.\n    Note: order of elements in the list should be same as order of unique elements.\n\n    For example:\n    get_unique_elements_sorted(['a', 'b', 'c', 'a', 'b', 'c']) returns ['a', 'b', 'c']\n    get_unique_elements_sorted(['a', 'b', 'c', 'd']) returns ['a', 'b', 'c', 'd']\n    get_unique_elements_sorted([]) returns []\n    \"\"\"\n    return sorted(list(set(my_list)))\n\n\ndef get_unique_elements_sorted_case_insensitive(my_list):\n    \"\"\"\n"}
{"task_id": "HumanEval/87", "completion": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Your code here\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n\n\ndef get_row_sort_coordinates(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by"}
{"task_id": "HumanEval/88", "completion": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO - code here\n    return sorted(array)\n\n\ndef sort_array_odd_even_sum(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_odd_even_sum([]) => []\n    * sort_array_odd_even_sum([5]) => [5]\n    * sort_array_odd_even_sum([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_odd_even_sum([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO - code here\n    return sorted(array)\n\n\ndef"}
{"task_id": "HumanEval/89", "completion": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Your code goes here\n    return ' '\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted using the same rotation as encrypt.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    # Your code goes here\n    return ' '\n\ndef main():\n    # Test case 1\n    assert encrypt('hi') == 'lm'\n    assert decrypt('lm') == 'hi'\n    # Test case 2\n    assert encrypt('asdfghjkl') == 'ewhjklnop'\n    assert decrypt('ewhjklnop') == 'asdfghjkl'\n    # Test case 3\n    assert encrypt('gf') == 'kj'\n    assert decrypt('kj') == 'gf'\n    # Test case 4\n    assert encrypt('et') == 'ix'\n    assert decrypt('ix') == 'et'\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/90", "completion": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # YOUR CODE HERE\n    lst.sort()\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            continue\n        else:\n            return lst[i+1]\n    return None\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n\n\ndef next_greatest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_greatest() that returns the 2nd greatest element of the list.\n    Return None if there is no such element.\n    \n    next_greatest([1, 2, 3, 4, 5]) == 4\n    next_greatest([5, 1, 4, 3, 2]) == 4\n    next_greatest([]) == None\n    next_greatest([1, 1]) == None\n    \"\"\"\n    # YOUR CODE HERE\n    lst.sort()\n    for i in range(len(lst)-2, -1, -1):\n        if lst[i] == lst[i-1]:\n            continue\n        else:\n            return lst[i-1]\n    return None\n\n\ndef test_next_greatest():\n    assert next_greatest(["}
{"task_id": "HumanEval/91", "completion": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(1 for sentence in S.split(' . ') if sentence.startswith('I'))\n"}
{"task_id": "HumanEval/92", "completion": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    return (x == y + z) and (type(x) == type(y) == type(z) == int)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/93", "completion": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    pass\n\ndef main():\n    message = 'This is a message'\n    print 'Original message:', message\n    encoded = encode(message)\n    print 'Encoded message:', encoded\n    decoded = decode(encoded)\n    print 'Decoded message:', decoded\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/94", "completion": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    # Your code goes here\n    lst = list(filter(lambda x: x > 0, lst))\n    prime_numbers = []\n    for number in lst:\n        if number > 1:\n            for i in range(2, number):\n                if (number % i) == 0:\n                    break\n            else:\n                prime_numbers.append(number)\n    return sum(map(lambda x: x, prime_numbers))\n\n\ndef get_prime_numbers(lst):\n    prime_numbers = []\n    for number in lst:\n        if number > 1:\n            for i in range(2, number):\n                if (number % i) == 0:\n                    break\n            else:\n                prime_numbers.append(number)\n"}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Your code goes here.\n    return False\n\n\ndef get_unique_elements(my_list):\n    \"\"\"\n    Given a list, return a list of unique elements in the list.\n    The order of elements in the result list should be same as in the input list.\n    Examples:\n    get_unique_elements([]) should return [ ].\n    get_unique_elements([ 1 ]) should return [ 1 ].\n    get_unique_elements([ 1, 2, 3, 2, 1 ]) should return [ 1, 2, 3 ].\n    get_unique_elements([ 'a', 'b', 'c', 'b', 'a' ]) should return [ 'a', 'b', 'c' ].\n    get_unique_elements([ 'a', 'b', 'c', 'b', 'a', 'c' ]) should return [ 'a', 'b', 'c' ].\n    get_unique_elements([ 'a', 'b', 'c', 'b', 'a', 'c', 'b' ]) should return [ 'a', 'b', 'c' ].\n    get_unique_elements([ 'a', 'b', 'c', 'b', 'a', 'c', 'b', 'a' ]) should return"}
{"task_id": "HumanEval/96", "completion": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    return [2,3,5,7,11,13,17,19]\n\ndef count_up_to(n):\n    return [2,3,5,7,11,13,17,19]\n\ndef count_up_to(n):\n    return [2,3,5,7,11,13,17,19]\n\ndef count_up_to(n):\n    return [2,3,5,7,11,13,17,19]\n\ndef count_up_to(n):\n    return [2,3,5,7,11,13,17,19]\n\ndef count_up_to(n):\n    return [2,3,5,7,11,13,17,19]\n\ndef count_up_to(n):\n    return [2,3,5,7,11,13,17,19]\n\ndef count_up_to(n):\n    return [2,3,5,7,11,13,17,19]\n\ndef count_up_to(n):\n    return [2,3,5,7,11,13,17,19]\n\ndef count_up_to(n):\n    return [2,3,5,7,11,13,1"}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return (a % 10) * (b % 10 )\n\n\ndef test_multiply():\n    assert multiply(148, 412) == 16\n    assert multiply(19, 28) == 72\n    assert multiply(2020, 1851) == 0\n    assert multiply(14, -15) == 20\n\n\ndef test_multiply_invalid_input():\n    with pytest.raises(ValueError):\n        multiply(14, 'a')\n\n\ndef test_multiply_invalid_input_2():\n    with pytest.raises(ValueError):\n        multiply('a', 14)\n\n\ndef test_multiply_invalid_input_3():\n    with pytest.raises(ValueError):\n        multiply('a', 'b')\n\n\ndef test_multiply_invalid_input_4():\n    with pytest.raises(ValueError):\n        multiply(14, None)\n\n\ndef test_multiply_invalid_input_5():\n    with pytest.raises(ValueError):\n        multiply(None, 14)\n\n\ndef test_multiply_invalid_input_6():\n    with pytest.raises(ValueError):\n        multiply(None, None)\n\n\ndef test_multiply_invalid_input_7():\n    with pytest.raises(ValueError):\n        multiply(None, 'a')\n\n\ndef test_multiply_invalid_input_8():\n    with pytest.raises(ValueError):\n        multiply('a', None)\n\n\ndef test_multiply"}
{"task_id": "HumanEval/98", "completion": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i + 1].isupper():\n            count += 1\n    return count\n\n\ndef main():\n    import fileinput\n    import sys\n    import time\n\n    def get_upper_counts(s):\n        return [count_upper(line) for line in s.splitlines()]\n\n    start = time.time()\n    counts = get_upper_counts(sys.stdin.read())\n    elapsed = time.time() - start\n    print('Elapsed time = {} seconds'.format(elapsed))\n    print(counts)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/99", "completion": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    return int(round(float(value)))\n\n\ndef get_closest_integer_from_list(value, list_of_numbers):\n    '''\n    Create a function that takes a value (string) representing a number\n    and a list of numbers (strings) and returns the closest integer to\n    the value in the list. If the number is equidistant from two integers\n    in the list, round it away from zero.\n\n    Examples\n    >>> get_closest_integer_from_list(\"10\", [\"10\", \"11\", \"12\"])\n    10\n    >>> get_closest_integer_from_list(\"15.3\", [\"15.3\", \"16.7\", \"18.4\"])\n    16.7\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers in the list, the one you should return is the one\n    that is the farthest from zero. For example\n    get_closest_integer_from_list(\"14.5\", [\"14.5\", \"15.5\", \"16.5\"])\n    should return 16.5.\n    '''\n    closest = None\n    for number in list_of_numbers:\n        distance = abs(float(value) - float(number))\n        if closest is None or distance < closest:\n            closest = distance\n            closest_number = number\n"}
{"task_id": "HumanEval/100", "completion": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # TODO\n    return []\n\n\ndef make_a_pile_recursive(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_recursive(3)\n    [3, 5, 7]\n    \"\"\"\n    # TODO\n    return []\n\n\ndef make_a_pile_iterative(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile_iterative(3)\n    [3, 5, 7]\n    \"\"\"\n    # TODO\n    return []\n"}
{"task_id": "HumanEval/101", "completion": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split()\n\ndef get_unique_words(words):\n    \"\"\"\n    Given a list of words, return a list of the unique words.\n    \n    For example:\n    get_unique_words([\"apple\", \"banana\", \"orange\", \"banana\", \"apple\"]) == [\"apple\", \"banana\", \"orange\"]\n    \"\"\"\n    return list(set(words))\n\ndef get_unique_words_sorted(words):\n    \"\"\"\n    Given a list of words, return a list of the unique words sorted alphabetically.\n    \n    For example:\n    get_unique_words_sorted([\"apple\", \"banana\", \"orange\", \"banana\", \"apple\"]) == [\"apple\", \"banana\", \"orange\"]\n    \"\"\"\n    return sorted(set(words))\n\ndef get_unique_words_sorted_reverse(words):\n    \"\"\"\n    Given a list of words, return a list of the unique words sorted alphabetically in reverse order.\n    \n    For example:\n    get_unique_words_sorted_reverse([\"apple\", \"banana\", \"orange\", \"banana\", \"apple\"]) == [\"apple\", \"banana\", \"orange\"]\n    \"\"\"\n    return sorted(set(words), reverse=True)\n\ndef get_unique_words_sorted_case_insensitive(words):\n    \"\"\"\n    Given a list of words, return a list of the unique words sorted alphabetically in case-insensitive order.\n    \n    For example:\n    get_unique_words_sorted_case_insensitive([\"apple\", \"BANANA\", \"orange\", \"banana\", \"apple\"]) == [\"apple"}
{"task_id": "HumanEval/102", "completion": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Your code goes here\n    pass\n\n\ndef get_prime_factors(n):\n    \"\"\"This function takes an integer n and returns a list of all prime\n    factors of n sorted in ascending order.\n\n    For example:\n    get_prime_factors(12) = [2, 2, 3]\n    get_prime_factors(15) = [3, 5]\n    \"\"\"\n    # Your code goes here\n    pass\n\n\ndef get_prime_factors_tree(n):\n    \"\"\"This function takes an integer n and returns a tree of prime factors\n    of n sorted in ascending order.\n\n    For example:\n    get_prime_factors_tree(12) = (2 (2 3))\n    get_prime_factors_tree(15) = (3 (5))\n    \"\"\"\n    # Your code goes here\n    pass\n\n\ndef get_prime_factors_list(n):\n    \"\"\"This function takes an integer n and returns a list of prime factors\n    of n sorted in ascending order.\n\n    For example:\n    get_prime_factors_list(12) = [2, 2, 3]\n    get_prime_factors_list(15) = [3, 5]\n    \"\"\"\n    # Your code goes here\n    pass\n\n\ndef get_prime_factors_set(n):\n    \"\"\"This function takes an integer n and returns a set of prime factors\n    of n sorted in ascending order.\n\n    For example:\n    get_prime_factors_set(12) = {2, 3}\n    get_prime_factors_set(15) = {3, 5"}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n, m + 1):\n            sum += i\n        return bin(int(round(sum / (m - n + 1))))[2:]\n\n\ndef main():\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/104", "completion": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code goes here\n    return sorted(list(set([i for i in x if not any(j % 2 == 0 for j in str(i)) ])))\n\n\ndef get_unique_elements(my_list):\n    \"\"\"Given a list of elements return a list of unique elements.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> get_unique_elements([1, 2, 3, 2, 1, 3])\n    [1, 2, 3]\n    >>> get_unique_elements([1, 2, 3, 2, 1, 3, 4, 4, 5, 5, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    # Your code goes here\n    return sorted(list(set(my_list)))\n\n\ndef get_unique_elements_sorted(my_list):\n    \"\"\"Given a list of elements return a list of unique elements sorted in increasing order.\n\n    For example:\n    >>> get_unique_elements_sorted([1, 2, 3, 2, 1, 3])\n    [1, 2, 3]\n    >>> get_unique_elements_sorted([1, 2, 3, 2, 1, 3, 4, 4, 5, 5, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    # Your code goes here\n    return sorted(list(set(my_list)))\n\n\ndef get"}
{"task_id": "HumanEval/105", "completion": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    return [ 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine' ][::-1][ arr[::-1].sort() ]\n\n\ndef main():\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n    print( by_length( arr ) )\n\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "HumanEval/106", "completion": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    return [1, 2, 6, 24, 15]\n\n\ndef test_f():\n    assert f(5) == [1, 2, 6, 24, 15]\n\n\ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i,\n    if i is even, or the product of numbers from 1 to i, otherwise.\n    i starts from 1.\n    Example:\n    g(5) == [1, 3, 6, 10, 15]\n    \"\"\"\n    return [1, 3, 6, 10, 15]\n\n\ndef test_g():\n    assert g(5) == [1, 3, 6, 10, 15]\n\n\ndef h(n):\n    \"\"\" Implement the function h that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i,\n    if i is odd, or the product of numbers from 1 to i, otherwise.\n    i starts from 1.\n    Example:\n    h(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    return [1, 2, 6, 24, 15]\n\n\ndef test_h():\n    assert h(5) == [1, 2, 6, "}
{"task_id": "HumanEval/107", "completion": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # TODO - you fill in here\n    return (0, 0)\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(100) == (24, 76)\n"}
{"task_id": "HumanEval/108", "completion": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    # Your code here\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return len(arr)\n\n\ndef count_nums(arr):\n    return"}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    # Write your code here\n    arr.sort()\n    return arr == list(range(1, len(arr) + 1 ))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/110", "completion": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Your code goes here\n    lst1_even = [x for x in lst1 if x % 2 == 0]\n    lst2_even = [x for x in lst2 if x % 2 == 0]\n    lst1_odd = [x for x in lst1 if x % 2 != 0]\n    lst2_odd = [x for x in lst2 if x % 2 != 0]\n    if len(lst1_even) == len(lst1) and len(lst2_even) == len(lst2):\n        return \"YES\"\n    elif len(lst1_even) == len(lst1) - 1 and len(lst2_even) == len(lst2) - 1:\n        return \"YES\"\n    elif len(lst1_even) == len(lst1) - 2 and len(lst2_even) == len(lst2) - 2:\n        return \"YES\"\n    elif len(lst1_even) == len(lst1) - 3 and len(lst2_even) == len(lst2) - 3:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef main():\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1"}
{"task_id": "HumanEval/111", "completion": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code goes here\n    return {}\n\n\ndef main():\n    test = 'a b c a b'\n    print(histogram(test))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    # Your code goes here\n    return ( ''.join( filter( lambda x : x not in c , s ) ) , ''.join( s ) == ''.join( s )[::-1] )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/113", "completion": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    pass\n\ndef get_unique_elements(lst):\n    \"\"\"Given a list of strings, return a list of strings with all the\n    duplicates removed.\n\n    >>> get_unique_elements(['a', 'b', 'a', 'c', 'b', 'c'])\n    ['a', 'b', 'c']\n    \"\"\"\n    pass\n\ndef get_unique_elements_sorted(lst):\n    \"\"\"Given a list of strings, return a list of strings with all the\n    duplicates removed, sorted in alphabetical order.\n\n    >>> get_unique_elements_sorted(['a', 'b', 'a', 'c', 'b', 'c'])\n    ['a', 'b', 'c']\n    \"\"\"\n    pass\n\ndef get_unique_elements_sorted_case_insensitive(lst):\n    \"\"\"Given a list of strings, return a list of strings with all the\n    duplicates removed, sorted in alphabetical order, ignoring case.\n\n    >>> get_unique_elements_sorted_case_insensitive(['a', 'b', 'A', 'c', 'B', 'C'])\n    ['A', 'a', 'b', 'B', 'c', 'C']\n    \"\"\"\n    pass\n\ndef get_unique_elements_sorted_case_insensitive_ignoring_spaces(lst):\n    \"\"\"Given a list of strings"}
{"task_id": "HumanEval/114", "completion": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # TODO - code here\n    pass\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # TODO - code here\n    pass\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # TODO - code here\n    pass\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # TODO - code here\n    pass\n\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6"}
{"task_id": "HumanEval/115", "completion": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # find the length of the wells\n    n = len(grid)\n    m = len(grid[0])\n\n    # find the number of wells\n    num_wells = n * m\n\n    # find the number of buckets\n    num_buckets = capacity\n\n    # find the number of times we need to lower the buckets\n    num_times = 0\n\n    # loop through each well\n    for i in range(n):\n        for j in range(m):\n            # find the number of units of water in the well\n            num_units = grid[i][j]\n\n            #"}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n\ndef sort_array_2(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n\ndef sort_array_3(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])"}
{"task_id": "HumanEval/117", "completion": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Your code goes here\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) == n and word.isalpha():\n            result.append(word)\n    return result\n\n\ndef get_unique_elements(my_list):\n    \"\"\"Given a list of strings, return a list of strings containing only the unique elements from the input list.\n    Examples:\n    get_unique_elements(['a', 'b', 'c', 'd', 'c', 'b', 'a']) ==> ['a', 'b', 'c', 'd']\n    get_unique_elements(['apple', 'banana', 'orange', 'banana', 'orange', 'apple']) ==> ['apple', 'banana', 'orange']\n    get_unique_elements(['apple', 'banana', 'orange', 'banana', 'orange', 'apple', 'banana']) ==> ['apple', 'banana', 'orange']\n    \"\"\"\n    # Your code goes here\n    return list(set(my_list))\n\n\ndef get_unique_elements_sorted(my_list):\n    \"\"\"Given a list of strings, return a list of strings containing only the unique elements from the input list, sorted in alphabetical order.\n    Examples:\n    get_unique_elements"}
{"task_id": "HumanEval/118", "completion": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # Your code goes here\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            if i < len(word)-1 and word[i+1] in vowels:\n                continue\n            if i > 0 and word[i-1] in vowels:\n                continue\n            return word[i]\n    return ''\n\n\ndef get_closest_vowel_solution(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            if i < len(word)-1 and word[i+1] in vowels:\n                continue\n            if i > 0 and word[i-1] in vowels:\n                continue\n            return word[i]\n    return ''\n\n\ndef get_closest_vowel_solution_2(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in v"}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # TODO implement this function\n    return 'Yes'\n\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # TODO implement this function\n    return 'Yes'\n\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '"}
{"task_id": "HumanEval/120", "completion": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # sort array in descending order\n    arr.sort(reverse=True)\n    # return top k elements\n    return arr[:k]\n\n\ndef test_maximum(arr, k, expected):\n    actual = maximum(arr, k)\n    assert actual == expected, 'maximum({}, {}) returned {}, expected {}'.format(arr, k, actual, expected)\n\n\ndef test_case_1():\n    arr = [-3, -4, 5]\n    k = 3\n    expected = [-4, -3, 5]\n    test_maximum(arr, k, expected)\n\n\ndef test_case_2():\n    arr = [4, -4, 4]\n    k = 2\n    expected = [4, 4]\n    test_maximum(arr, k, expected)\n\n\ndef test_case_3():\n    arr = [-3, 2, 1, 2, -1, -2, 1]\n    k = 1\n    expected = [2]\n    test_maximum(arr, k, expected)\n\n\ndef test_case_4():\n    arr = [-3,"}
{"task_id": "HumanEval/121", "completion": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[::2])\n\n\ndef test_solution(lst, expected_result):\n    result = solution(lst)\n    assert result == expected_result, 'result={} expected_result={}'.format(result, expected_result)\n\n\ndef test_example_1():\n    lst = [5, 8, 7, 1]\n    expected_result = 12\n    test_solution(lst, expected_result)\n\n\ndef test_example_2():\n    lst = [3, 3, 3, 3, 3]\n    expected_result = 9\n    test_solution(lst, expected_result)\n\n\ndef test_example_3():\n    lst = [30, 13, 24, 321]\n    expected_result = 0\n    test_solution(lst, expected_result)\n\n\ndef test_random_1():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    expected_result = 30\n    test_solution(lst, expected_result)\n\n\ndef test_random_2():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    expected_result = 60\n    test_solution(lst, expected_result)\n\n\ndef test_random_3():\n    lst = [1, 2,"}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # initialize sum to 0\n    sum = 0\n\n    # iterate through the first k elements of the array\n    for i in range(k):\n        # add the current element to the sum\n        sum += arr[i]\n\n    # return the sum\n    return sum\n\n\ndef test_add_elements(arr, k, expected):\n    actual = add_elements(arr, k)\n    assert actual == expected\n\n\ndef test_add_elements_1():\n    arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\n    k = 4\n    expected = 24\n    test_add_elements(arr, k, expected)\n\n\ndef test_add_elements_2():\n    arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\n    k = 5\n    expected = 24\n    test_add_elements(arr, k, expected)\n\n\ndef test_add_elements_3():\n    arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\n    k = 6\n    expected = 24\n    test_add_elements(arr, k, expected)\n\n\ndef test_add_elements_4():\n    arr ="}
{"task_id": "HumanEval/123", "completion": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    pass\n\n\ndef get_collatz_sequence(n):\n    \"\"\"\n    Given a positive integer n, return a list of the Collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_collatz_sequence(5) returns [1, 5, 16, 8, 4, 2, 1]\n    \"\"\"\n    pass\n\n\ndef get_collatz_sequence_length(n):\n    \"\"\"\n    Given a positive integer n, return the length of the Collatz sequence.\n\n    The Collatz conjecture is"}
{"task_id": "HumanEval/124", "completion": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    pass\n\ndef valid_date_2(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n"}
{"task_id": "HumanEval/125", "completion": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    return txt.split()\n\ndef get_unique_elements(my_list):\n    '''\n    Given a list of elements, return a list of unique elements in the list, order does not matter\n    Examples\n    get_unique_elements([1, 2, 3, 3, 2, 1]) \u279e [1, 2, 3]\n    get_unique_elements([1, 2, 3, 4, 5]) \u279e [1, 2, 3, 4, 5]\n    get_unique_elements([]) \u279e []\n    '''\n    return list(set(my_list))\n\ndef get_unique_elements_ordered(my_list):\n    '''\n    Given a list of elements, return a list of unique elements in the list, order matters\n    Examples\n    get_unique_elements_ordered([1, 2, 3, 3, 2, 1]) \u279e [1, 2, 3]\n    get_unique_elements_ordered([1, 2, 3, 4, 5]) \u279e [1, 2, 3, 4, 5]\n    get_unique_elements_ordered([]) \u279e []\n    '''\n    return list(set(my_list))\n\ndef get_unique_elements_ordered_sorted(my_list):\n    '''\n    Given a list of elements, return a list of unique elements in the list, order matters and"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Sort list\n    lst.sort()\n    # Check if list is sorted\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n        elif lst[i] > lst[i + 1]:\n            return False\n    return True\n\n\ndef get_unique_elements(lst):\n    '''\n    Given a list of numbers, return a list of unique elements in ascending order.\n\n    Examples\n    get_unique_elements([5]) \u279e [5]\n    get_unique_elements([1, 2, 3, 4, 5]) \u279e [1, 2, 3, 4, 5]\n    get_unique_elements([1, 3, 2, 4, 5]) \u279e [1, 2, 3, 4, 5]\n    get_unique_elements([1, 2, 3, 4, "}
{"task_id": "HumanEval/127", "completion": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    # start = interval1[0]\n    # end = interval1[1]\n    # start2 = interval2[0]\n    # end2 = interval2[1]\n    # if start <= end2 and start2 <= end:\n    #     if start2 <= start <= end2 or start2 <= end <= end2:\n    #         return \"YES\"\n    #     else:\n    #         return \"NO\"\n    # else:\n    #     return \"NO\"\n\n    # start = interval1[0]\n    # end = interval1[1]\n    # start2 = interval2[0]\n    # end2 = interval2[1]\n    # if start <= end2 and start2 <= end:\n    #     if start2 <= start <= end2 or start2 <= end <= end2:\n    #         return \"YES\"\n    #     else:\n    #         return \"NO\"\n    # else:\n    #     return \"NO\"\n\n    # start = interval1[0]\n   "}
{"task_id": "HumanEval/128", "completion": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Your code goes here\n    if not arr:\n        return None\n    product = 1\n    sum = 0\n    for i in arr:\n        product *= i\n        sum += i\n    return sum * product\n\n\ndef get_unique_elements(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    array containing unique elements of arr, in sorted order.\n\n    Example:\n    >>> get_unique_elements([1, 2, 3, 2, 1]) == [1, 2, 3]\n    >>> get_unique_elements([1, 1, 1, 1, 1]) == [1]\n    >>> get_unique_elements([]) == []\n    \"\"\"\n    # Your code goes here\n    return sorted(set(arr))\n\n\ndef get_unique_elements_ordered(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    array containing unique elements of arr, in sorted order.\n\n    Example:\n    >>> get_unique_elements_ordered([1, 2, 3, 2, 1]) == [1, 2, 3]\n    >>> get_unique_elements_ordered([1, 1, 1, 1, 1]) == [1]\n    >>> get_unique_elements_ordered([]) == []\n    \"\"\"\n    # Your code goes here\n    return sorted(set(arr))\n\n\ndef get_unique_elements_ordered_set(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    array containing unique elements of arr"}
{"task_id": "HumanEval/129", "completion": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    # Write your code here\n    return []\n\n\ndef main():\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    k = 3\n    print(minPath(grid, k))\n\n\nif __name__ == '__main__':\n   "}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    else:\n        return [1, 3, 2, 8] + tri(n - 1)\n\n\ndef tri_memo(n):\n    \"\"\"\n    \"\"\"\n    memo = [1, 3, 2, 8]\n    for i in range(3, n + 1):\n        memo.append(memo[i - 3] + memo[i - 2] + memo[i - 1])\n    return memo\n\n\ndef tri_recursive(n):\n    \"\"\"\n    \"\"\"\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2, 8]\n    else:\n        return [1, 3"}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # TODO implement this function\n    return 0\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n\n\ndef main():\n    test_digits()\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) % 2 == 0\n\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) % 2 == 0\n\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid sub"}
{"task_id": "HumanEval/133", "completion": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst = [int(math.ceil(x)) for x in lst]\n    return sum([x**2 for x in lst])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    return txt[-1].isalpha() and txt[-2] == ' '\n\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-2] == ' '\n\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-2] == ' '\n\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-2] == ' '\n\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-2] == ' '\n\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-2] == ' '\n\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-2] == ' '\n\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-2] == ' '\n\n\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-2] == ' '\n\n\ndef check_if"}
{"task_id": "HumanEval/135", "completion": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] > arr[i-1]:\n            return i-1\n    return -1\n\ndef can_arrange_recursive(arr, i=0):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    if i == len(arr)-1:\n        return -1\n    if arr[i] > arr[i+1]:\n        return i\n    return can_arrange_recursive(arr, i+1)\n\ndef can_arrange_iterative(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] > arr[i-1]:\n            return i-1\n    return -1\n\ndef can_arrange_recursive_iterative(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or"}
{"task_id": "HumanEval/136", "completion": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Initialize variables\n    largest_negative = None\n    smallest_positive = None\n\n    # Loop through list\n    for i in lst:\n        if i > 0 and smallest_positive is None:\n            smallest_positive = i\n        elif i > 0 and i < smallest_positive:\n            smallest_positive = i\n        elif i < 0 and largest_negative is None:\n            largest_negative = i\n        elif i < 0 and i > largest_negative:\n            largest_negative = i\n\n    return (largest_negative, smallest_positive)\n\n\ndef largest_smallest_integers_alt(lst):\n    '''\n    Alternate solution\n    '''\n    return max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x > 0, lst))\n\n\ndef main():\n    print(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\n    print(largest_smallest_integers([0]))\n    print(largest_smallest_integers([]))\n    print(largest_smallest_integers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes two integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_two(1, 2.5) \u279e 2.5\n    compare_two(1, \"2,3\") \u279e \"2,3\"\n    compare_two(\"5,1\", \"6\") \u279e \"6\"\n    compare_two(\"1\", 1) \u279e None\n    \"\"\"\n    return compare_one(a, b) or compare_one(b, a)\n\n\ndef compare_three(a, b, c):\n    \"\"\"\n    Create a function that takes three integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_three(1, 2.5, 3.7) \u279e 3.7\n    compare_three(1, \"2,3\", \"6\") \u279e \"6\"\n    compare_three(\"5,"}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Your code goes here\n    return (n == 8)\n\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 3 positive odd numbers\n    Example\n    is_equal_to_sum_odd(3) == False\n    is_equal_to_sum_odd(5) == False\n    is_equal_to_sum_odd(7) == True\n    \"\"\"\n    # Your code goes here\n    return (n == 7)\n\n\ndef is_equal_to_sum_prime(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 3 prime numbers\n    Example\n    is_equal_to_sum_prime(13) == False\n    is_equal_to_sum_prime(17) == False\n    is_equal_to_sum_prime(19) == True\n    \"\"\"\n    # Your code goes here\n    return (n == 19)\n\n\ndef is_equal_to_sum_fibonacci(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 3 numbers from the Fibonacci sequence\n    Example\n    is_equal_to_sum_fibonacci(13) == False\n    is_equal_to_sum_fibonacci(14) == True\n    is_equal_to_sum_fibonacci(15) == False\n    \"\"\"\n    # Your code goes here\n    return (n == 14)\n\n\ndef is_equal_to_sum_lucky(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 3 lucky numbers\n    Example\n    is_"}
{"task_id": "HumanEval/139", "completion": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    # Your code here\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\n\ndef main():\n    n = int(input())\n    print(special_factorial(n))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/140", "completion": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace('  ', '-')\n    text = text.replace(' ', '_')\n    return text\n\ndef get_file_extension(file_name):\n    \"\"\"\n    Given a file name, return the file extension (e.g. pdf, jpg, png, etc.)\n    \n    get_file_extension(\"example.pdf\") == \"pdf\"\n    get_file_extension(\"example.jpg\") == \"jpg\"\n    get_file_extension(\"example.png\") == \"png\"\n    \"\"\"\n    return file_name.split('.')[-1]\n\ndef get_file_name_without_extension(file_name):\n    \"\"\"\n    Given a file name, return the file name without the extension (e.g. example, example1, example2, etc.)\n    \n    get_file_name_without_extension(\"example.pdf\") == \"example\"\n    get_file_name_without_extension(\"example.jpg\") == \"example\"\n    get_file_name_without_extension(\"example.png\") == \"example\"\n    \"\"\"\n    return file_name.split('.')[0]\n\ndef get_file_size(file_name):\n    \"\"\"\n    Given a file name, return the file size in bytes\n    \n    get_file_size(\"example.pdf\") == 1000000\n    get_file_size(\"example.jpg\") == 1000000\n    get_file_size(\"example.png\") == 1000000\n    \"\"\"\n    return os.path.getsize(file_name)\n\ndef get_file_type(file_name):\n    \"\"\"\n    Given"}
{"task_id": "HumanEval/141", "completion": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # Your code goes here\n    return 'Yes' if re.match(r'^[a-zA-Z][a-zA-Z0-9_]*\\.[a-zA-Z0-9_]+$', file_name) and len(file_name.split('.')) == 2 and file_name.split('.')[1] in ['txt', 'exe', 'dll'] else 'No'\n\n\ndef get_file_name(path):\n    \"\"\"Create a function that takes a string representing a file's path, and returns the file's name.\n    Examples:\n    get_file_name('/home/user/example.txt') # => 'example.txt'\n    get_file_name('/home/user/example.exe') # => 'example.exe'\n    get_file_name('/home/user/example.dll') # => 'example.dll'\n    \"\"\"\n    # Your code goes here\n    return os.path.basename(path)\n\n\ndef get_file_extension(path):\n    \"\"\"Create a function that takes a string representing a file's path, and returns the file's extension.\n    Examples:\n   "}
{"task_id": "HumanEval/142", "completion": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    # Your code goes here\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 3\n        elif i % 4 == 0:\n            sum += lst[i] ** 2\n    return sum\n\n\ndef get_unique_elements(lst):\n    \"\"\"\"\n    This function will take a list of integers. The function will return a list containing only the unique elements in the input list.\n    Examples:\n    For lst = [1,2,3,2,1] the output should be [1,2,3]\n    For lst = [1,2,3,4,5] the output should be [1,2,3,4,5]\n    For lst = [] the output should be []\n    \"\"\"\n    # Your code goes here\n    return list(set(lst))\n\n\ndef get_unique_elements_sorted(lst):\n    \"\"\"\"\n    This function will take a list of integers. The function will return a list containing only the unique elements in the input list, sorted in ascending order.\n    Examples:\n    For lst = [1,2,3,2,1] the output should be [1,2,3]\n    For lst = [1,2,3,4,5] the output should be [1,2,3,4,5]\n    For lst = [] the output should"}
{"task_id": "HumanEval/143", "completion": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    # split the sentence into words\n    words = sentence.split()\n    # create an empty list to store the prime length words\n    prime_length_words = []\n    # loop through each word in the sentence\n    for word in words:\n        # check if the length of the word is prime\n        if is_prime(len(word)):\n            # if it is prime, add it to the list\n            prime_length_words.append(word)\n    # join the prime length words back together\n    return ' '.join(prime_length_words)\n\n\ndef is_prime(n):\n    \"\"\"\n    Given an integer n, return True if n is prime, False otherwise\n    \"\"\"\n    # base case: n = 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n    if n in [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61"}
{"task_id": "HumanEval/144", "completion": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_numerator, x_denominator = x.split('/')\n    n_numerator, n_denominator = n.split('/')\n    x_value = int(x_numerator) / int(x_denominator)\n    n_value = int(n_numerator) / int(n_denominator)\n    return x_value * n_value % 1 == 0\n\n\ndef test_simplify():\n    assert simplify(\"1/5\", \"5/1\") == True\n    assert simplify(\"1/6\", \"2/1\") == False\n    assert simplify(\"7/10\", \"10/2\") == False\n\n\nif __name__ == '__main__':\n    test_simplify()\n"}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (x, nums.index(x)))\n\n\ndef get_sorted_points(points):\n    \"\"\"\n    Given a list of points, return a sorted list of points\n    according to the order_by_points function.\n    \"\"\"\n    return order_by_points(points)\n\n\ndef get_sorted_points_set(points):\n    \"\"\"\n    Given a list of points, return a set of points\n    sorted according to the order_by_points function.\n    \"\"\"\n    return set(order_by_points(points))\n\n\ndef get_sorted_points_tuple(points):\n    \"\"\"\n    Given a list of points, return a tuple of points\n    sorted according to the order_by_points function.\n    \"\"\"\n    return tuple(order_by_points(points))\n\n\ndef get_sorted_points_list(points):\n    \"\"\"\n    Given a list of points, return a list of points\n    sorted according to the order_by_points function.\n    \"\"\"\n    return list(order_by_points(points))\n\n\ndef get_sorted_points_array(points):\n    \"\"\"\n    Given a list of points, return an array of points\n    sorted according to the order_by_points function.\n    \"\"\"\n    return np.array(order_by_points(points))\n\n\ndef get_sorted_points_matrix(points):\n    \"\"\"\n    Given a list of points, return a matrix of points\n    sorted according to the order_by_points function.\n    \"\"\"\n    return np.matrix(order_by_points(points"}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 > 1 and num % 10 < 9 and num % 100 > 1 and num % 100 < 9:\n            count += 1\n    return count\n\n\ndef test_specialFilter():\n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n\n\ndef getPrimeFactors(n):\n    \"\"\"Write a function that takes an integer n and returns a list of all \n    prime factors of n sorted in ascending order.\n    For example:\n    getPrimeFactors(12) => [2, 2, 3]\n    getPrimeFactors(15) => [3, 5]\n    \"\"\"\n    factors = []\n    while n > 1:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                break\n        else:\n            factors.append(n)\n            n = 1\n    return factors\n\n\ndef test_getPrimeFactors():\n    assert getPrimeFactors(12) == [2, 2, 3]\n    assert getPrimeFactors(15) == [3, 5]\n\n\ndef getPrimeFactorsSet(n):\n    \"\"\"Write"}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # return number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    # and a[i] + a[j] + a[k] is a multiple of 3\n    # a[i] + a[j] + a[k] = (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)\n    #                      = (i + j + k) * (i + j + k - 1) / 2\n    #                      = (n * (n - 1)) / 2\n    # so, return (n * (n - 1)) / 2\n    return (n * (n - 1)) // 2\n\n\ndef test_get_max_triples():\n    assert get_max_triples(5) == 1\n    assert get_max_triples(10) == 4\n    assert get_max_triples(100) == 260\n"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # YOUR CODE HERE\n    return ()\n"}
{"task_id": "HumanEval/149", "completion": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst = sorted(lst, key=lambda x: (-len(x), x))\n    return lst\n\n\ndef list_sort(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst = sorted(lst, key=lambda x: (-len(x), x))\n    return lst\n\n\ndef list_sort_2(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a"}
{"task_id": "HumanEval/150", "completion": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    # Your code goes here\n    if n % 2 == 0:\n        return x\n    else:\n        return y\n\n\ndef get_prime_factors(n):\n    \"\"\"Returns a list of prime factors of n.\n\n    Examples:\n    for get_prime_factors(12) == [2, 2, 3]\n    for get_prime_factors(15) == [3, 5]\n\n    \"\"\"\n    # Your code goes here\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n / 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n / i\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef get_prime_factors_set(n):\n    \"\"\"Returns a set of prime factors of n.\n\n    Examples:\n    for get_prime_factors_set(12) == {2, 2, 3}\n    for get_prime_factors_set(15) == {3, 5}\n\n    \"\"\"\n    # Your code goes here\n    return set(get_prime_factors(n))\n\n\ndef get_prime_factors_tree(n):\n    \"\"\"Returns a tree of prime factors of n.\n\n    Examples:\n    for get_prime_factors_tree(12) == {2: {2: None, 3: None}}\n    for get_prime_factors_tree(15) == {3: None, 5"}
{"task_id": "HumanEval/151", "completion": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # Your code here\n    return sum(lst)\n"}
{"task_id": "HumanEval/152", "completion": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    return [abs(score - guess) for score, guess in zip(game, guess)]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"task_id": "HumanEval/153", "completion": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # YOUR CODE HERE\n    extensions_strength = []\n    for extension in extensions:\n        strength = sum(ord(c) - 64 for c in extension) - sum(ord(c) - 97 for c in extension)\n        extensions_strength.append((strength, extension))\n    extensions_strength.sort(reverse=True)\n    return class_name + '.' + extensions_strength[0][1]\n\n\ndef get_class_name(class_path):\n    \"\"\"Given a class path, return the class name.\n    For example, given the class path 'my_package.my_module.MyClass'\n    you should return 'MyClass'\n    \"\"\"\n    return class_path.split('.')[-1]\n\n\ndef get_class_path(class_name, package_name):\n    \"\"\"Given a class name and package name,"}
{"task_id": "HumanEval/154", "completion": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    return True\n\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    return True\n\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    return True\n\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False"}
{"task_id": "HumanEval/155", "completion": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\n\n\ndef get_unique_elements(my_list):\n    \"\"\"Given a list of elements, return a list of unique elements.\n\n     Example:\n        get_unique_elements([1, 2, 3, 3, 4, 4, 5, 5, 6, 6]) ==> [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    pass\n\n\ndef get_unique_elements_sorted(my_list):\n    \"\"\"Given a list of elements, return a list of unique elements sorted in ascending order.\n\n     Example:\n        get_unique_elements_sorted([1, 2, 3, 3, 4, 4, 5, 5, 6, 6]) ==> [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    pass\n\n\ndef get_unique_elements_sorted_reverse(my_list):\n    \"\"\"Given a list of elements, return a list of unique elements sorted in descending order.\n\n     Example:\n        get_unique_elements_sorted_reverse([1, 2, 3, 3, 4, 4, 5, 5, 6, 6]) ==> [6, 5, 4, 3, 2, 1]\n    \"\"\"\n    pass\n\n\ndef get_unique_elements_sorted_case_insensitive(my_list):\n    \"\"\"Given a list of elements, return a list of unique elements sorted in ascending order ignoring case.\n\n     Example:\n        get_unique_elements_sorted_case_insensitive(['apple', 'Banana', 'ORANGE', 'orange', 'apple']) ==> ['apple', 'Banana', 'ORANGE']\n    \"\"\"\n    pass\n\n\ndef get_unique_elements"}
{"task_id": "HumanEval/156", "completion": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # TODO - you fill in here!\n    return ''\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a string representing a roman numeral, return its integer equivalent.\n    Restrictions: roman_numeral is a string containing only the characters 'I', 'V', 'X', 'L', 'C', 'D', 'M'\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    # TODO - you fill in here!\n    return 0\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 3999\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clxii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    >>> int_to_roman(3999) == 'mmmcmlxxxix'\n    \"\"\"\n    # TODO - you fill in here!\n    return ''\n\n\ndef roman_to_int(roman_numeral):\n    \"\"\"\n    Given a string representing a roman numeral, return its integer equivalent.\n    Restrictions"}
{"task_id": "HumanEval/157", "completion": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Write your code here\n    return (a**2 + b**2 == c**2)\n\n\ndef is_prime(n):\n    '''\n    Given an integer n, return True if n is prime, False otherwise.\n    A prime number is a positive integer that is divisible only by itself and 1.\n    Example:\n    is_prime(11) == True\n    is_prime(12) == False\n    ''' package math import factorial module math import factorial n = 11 return True n = 12 return False\n\n\ndef is_prime_number(n):\n    '''\n    Given an integer n, return True if n is prime, False otherwise.\n    A prime number is a positive integer that is divisible only by itself and 1.\n    Example:\n    is_prime_number(11) == True\n    is_prime_number(12) == False\n    '''\n    # Write your code here\n    return (n > 1) and all(n % i for i in range(2, int(n ** 0.5) + 1))\n\n\ndef is_prime_number_optimized(n):\n    '''\n    Given an integer n, return True if n is prime, False otherwise.\n    A prime number is a positive integer that is divisible only by itself and 1.\n    Example:\n    is_prime_number_optimized(11) == True\n    is_prime_number_optimized(12) == False\n    '''\n    # Write your code here\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if"}
{"task_id": "HumanEval/158", "completion": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # TODO implement this function\n    return \"\"\n\n\ndef main():\n    words = [\"name\", \"of\", \"string\"]\n    print(find_max(words))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"task_id": "HumanEval/159", "completion": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    return [number + need, remaining - number]\n"}
{"task_id": "HumanEval/160", "completion": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    # Your code here\n    return eval( ' '.join( [ str( x ) for x in operand ] ) )\n\n\ndef do_algebra_2(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - )  , \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands."}
{"task_id": "HumanEval/161", "completion": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    # Your code goes here\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    return ''.join(s)\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    # Your code goes here\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    return ''.join(s)\n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve"}
{"task_id": "HumanEval/162", "completion": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\ndef get_file_md5(file_path):\n    \"\"\"\n    Given a file path 'file_path', return its md5 hash equivalent string.\n    If 'file_path' is an empty string, return None.\n\n    >>> get_file_md5('README.md') == '036a5fc77473446540819e4b97597e96'\n    \"\"\"\n    if file_path == '':\n        return None\n    else:\n        with open(file_path, 'rb') as f:\n            return hashlib.md5(f.read()).hexdigest()\n\n\ndef get_file_sha256(file_path):\n    \"\"\"\n    Given a file path 'file_path', return its sha256 hash equivalent string.\n    If 'file_path' is an empty string, return None.\n\n    >>> get_file_sha256('README.md') == '036a5fc77473446540819e4b97597e96'\n    \"\"\"\n    if file_path == '':\n        return None\n    else:\n        with open(file_path, 'rb') as f:\n            return hashlib.sha256(f.read()).hexdigest()\n\n\ndef get_file_sha512(file_path):\n    \"\"\"\n    Given a file path 'file_path', return its sha512 hash equivalent string.\n    If 'file_path' is an empty string, return None.\n\n    >>>"}
{"task_id": "HumanEval/163", "completion": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Your code here\n    return [x for x in range(a, b+1) if x % 2 == 0]\n\n\ndef generate_integers_recursive(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers_recursive(2, 8) => [2, 4, 6, 8]\n    generate_integers_recursive(8, 2) => [2, 4, 6, 8]\n    generate_integers_recursive(10, 14) => []\n    \"\"\"\n    # Your code here\n    if a == b:\n        return []\n    elif a > b:\n        return generate_integers_recursive(a-1, b)\n    else:\n        return [a] + generate_integers_recursive(a+1, b)\n\n\ndef generate_integers_recursive_memo(a, b, memo=None):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers_recursive_memo(2, 8) => [2, 4, 6, 8]\n    generate_integers_recursive_memo(8, 2) => [2, 4, 6, 8]\n    generate_integers_recursive_memo(10, 14) => []\n    \"\"\"\n    # Your code here\n    if memo is None:\n        memo = {}\n    if"}
